Перем AutoItX;
Перем КаталогТестов, ДопКаталог;
Перем КонтФормы, ХранилищеНаФорме, тзСписокТестов;

Функция ТотЖе(Значение) Возврат Значение; КонецФункции
Функция Сам() Возврат ТотЖе(Контекст); КонецФункции
Функция База() Возврат ТотЖе(Контекст).ПолучитьБазовыйКласс(); КонецФункции

Процедура Конструктор()
	AutoItX=СоздатьОбъект("AutoItX3.Control");
	AutoItX.AutoItSetOption("SendKeyDelay", 0);
	AutoItX.AutoItSetOption("SendKeyDownDelay", 0);
КонецПроцедуры
//--------------------------------------------

// Установка данных для эмуляции интерактивного ввода данных
//
Процедура ЭмуляцияВвода(стрДанные)
	AutoItX.Send(стрДанные);
	//Сообщить(стрДанные);
	//Сервис=СоздатьОбъект("Сервис");
	//Сервис.ЭмулироватьКлавиатуру(стрДанные, 0, 2);
КонецПроцедуры
//--------------------------------------------

//Процедуры диалоговой формы

Процедура дфВвестиЗначение(идРеквизита, Значение) Экспорт
	База().дфВвестиЗначение(идРеквизита, Значение);
	КонтФормы.ПриОбновленииФормы(идРеквизита);
КонецПроцедуры
//--------------------------------------------

Процедура дфВыполнитьФормулу(идРеквизита) Экспорт
	База().дфВыполнитьФормулу(идРеквизита);
	КонтФормы.ПриОбновленииФормы(идРеквизита);
КонецПроцедуры
//--------------------------------------------

Процедура дфДобавитьТест(ИмяТеста)
	ЭмуляцияВвода(ИмяТеста+"{ENTER}");
	Сам().дфВыполнитьФормулу("кнДобавитьТест");
КонецПроцедуры
//--------------------------------------------

Процедура дфИзменитьТест(ИмяТеста)
	ЭмуляцияВвода("+{END}"+ИмяТеста+"{ENTER}");
	Сам().дфВыполнитьФормулу("СписокТестов");
КонецПроцедуры
//--------------------------------------------

Процедура дфКопироватьТест(ИмяТеста)
	ЭмуляцияВвода(ИмяТеста+"{ENTER}");
	Сам().дфВыполнитьФормулу("кнКопировать");
КонецПроцедуры
//--------------------------------------------

Процедура дфУдалитьТест()
	ЭмуляцияВвода("{ENTER}");
	Сам().дфВыполнитьФормулу("кнУдалитьТест");
КонецПроцедуры
//--------------------------------------------

Процедура дфСоздатьКаталог(ИмяКаталога)
	ЭмуляцияВвода(ИмяКаталога+"{ENTER}");
	Сам().дфВыполнитьФормулу("кнСоздатьКаталог");
КонецПроцедуры
//--------------------------------------------

Процедура дфВыбратьСтроку(НомерСтроки)
	предСтрока=тзСписокТестов.ТекущаяСтрока(НомерСтроки);
	тзСписокТестов.ПолучитьСтрокуПоНомеру(НомерСтроки);
	Если предСтрока<>НомерСтроки Тогда
		КонтФормы.ПриОбновленииФормы("СписокТестов");
	КонецЕсли;
КонецПроцедуры
//--------------------------------------------

Процедура Сетап() Экспорт
	КаталогТестов=КаталогИБ()+"Тест22";
	ДопКаталог=КаталогТестов+"\ДопКаталог";
	Если ФС.СуществуетФайл(КаталогТестов)=0 Тогда
		ФС.СоздатьКаталог(КаталогТестов);
	КонецЕсли;
	
	//ИмяФайла=СтрЗаменить(Сам().ПолучитьПуть(), "ЮнитТесты\Тест_TestBrowser.txt", "TestBrowser.ert");
	ИмяФайла=КаталогИБ()+"FuncTest_ExtForms\TestBrowser.ert";
	Сам().ОткрытьФорму("Обработка",, ИмяФайла);
	КонтФормы=Сам().КонтекстФормы;
	тзСписокТестов=КонтФормы.СписокТестов;
	ХранилищеНаФорме=КонтФормы.ХранилищеНаФорме;
	
	Сам().дфВвестиЗначение("ИмяКаталога", КаталогТестов);
КонецПроцедуры
//--------------------------------------------

Процедура Сброс() Экспорт
	РаботаСФайлами=СоздатьОбъект("РаботаСФайлами");
	РаботаСФайлами.ОчиститьКаталог(КаталогТестов);
	//ФС.УдалитьКаталог(КаталогТестов);
КонецПроцедуры
//--------------------------------------------

Процедура Тест_ДобавитьТест() Экспорт
	дфДобавитьТест("Добавленный тест");
	//Сам().ПроверитьРавенство(тзСписокТестов.ТекущаяСтрока(), 2);
	тзСписокТестов.ПолучитьСтрокуПоНомеру(1);
	Сам().ПроверитьРавенство(тзСписокТестов.Номер, 1);
	Сам().ПроверитьРавенство(тзСписокТестов.НазваниеТеста, "Добавленный тест");
КонецПроцедуры
//--------------------------------------------

Процедура Тест_ИзменитьТест() Экспорт
	дфДобавитьТест("Первое название");
	дфВыбратьСтроку(1);
	дфИзменитьТест("Другое название");
	тзСписокТестов.ПолучитьСтрокуПоНомеру(1);
	Сам().ПроверитьРавенство(тзСписокТестов.НазваниеТеста, "Другое название");
КонецПроцедуры
//--------------------------------------------

Процедура Тест_КопироватьТест() Экспорт
	дфДобавитьТест("Исходный тест");
	дфВыбратьСтроку(1);
	дфКопироватьТест("Копия теста");
	тзСписокТестов.ПолучитьСтрокуПоНомеру(2);
	Сам().ПроверитьРавенство(тзСписокТестов.НазваниеТеста, "Копия теста");
КонецПроцедуры
//--------------------------------------------

Процедура Тест_УдалитьТест() Экспорт
	дфДобавитьТест("Первый тест");
	дфВыбратьСтроку(1);
	дфКопироватьТест("Второй тест");
	дфВыбратьСтроку(1);
	дфУдалитьТест();
	тзСписокТестов.ПолучитьСтрокуПоНомеру(1);
	Сам().ПроверитьРавенство(тзСписокТестов.НазваниеТеста, "Второй тест");
КонецПроцедуры
//--------------------------------------------

Процедура Тест_ОбновитьСписокТестов() Экспорт
	дфДобавитьТест("Добавлен извне");
	Сам().дфВвестиЗначение("ИмяКаталога", КаталогТестов);
	Сам().ПроверитьРавенство(тзСписокТестов.КоличествоСтрок(), 1);
	дфВыбратьСтроку(1);
	Сам().ПроверитьРавенство(тзСписокТестов.НазваниеТеста, "Добавлен извне");
	
	дфУдалитьТест();
	Сам().ПроверитьРавенство(тзСписокТестов.КоличествоСтрок(), 0);
КонецПроцедуры
//--------------------------------------------

Процедура Тест_НомерТеста() Экспорт
	Возврат;
	// Недоделанный тест
	
	////ХранилищеВМодуле.НовыйТест("Первый Тест");
	////ХранилищеВМодуле.НовыйТест("Второй Тест");
	////КонтФормы.АнализКаталога(ХранилищеВМодуле, КонтФормы.ИмяКаталога);
	//дфДобавитьТест("Первый тест");
	//дфВыбратьСтроку(2);
	//дфКопироватьТест("Второй тест");
	//
	//тзСписокТестов.ТекущаяСтрока(2);
	//тзСписокТестов.ПолучитьСтрокуПоНомеру(3);
	//номер1=КонтФормы.НомерТеста(ХранилищеВМодуле);  // За вычетом каталогов
	//номер2=КонтФормы.НомерТеста(ХранилищеВМодуле, 1);  // За вычетом каталогов
	//Сам().ПроверитьРавенство(номер1, 2);
	//Сам().ПроверитьРавенство(номер2, 1);
КонецПроцедуры
//--------------------------------------------

Процедура ПроверитьДанныеТеста(фЭтоТест)
	Сам().ПроверитьРавенство(КонтФормы.Форма.ОжидаемыйРезультатТеста.Доступность(), фЭтоТест);
	Сам().ПроверитьРавенство(КонтФормы.ВходныеУсловияТеста.КоличествоСтрок(), ?(фЭтоТест=1, 3, 0));
КонецПроцедуры
//--------------------------------------------

Процедура Тест_ОбновлениеДанныхТеста() Экспорт
	ПроверитьДанныеТеста(0);
	дфДобавитьТест("Это тест");
	дфВыбратьСтроку(1);
	ПроверитьДанныеТеста(1);
	Сам().дфВвестиЗначение("ИмяКаталога", КаталогТестов);
	дфВыбратьСтроку(1);
	ПроверитьДанныеТеста(1);
	
	Сам().дфВыполнитьформулу("кнКаталогВверх");
	ПроверитьДанныеТеста(0);
	Сам().дфВыполнитьФормулу("СписокТестов");
	ПроверитьДанныеТеста(1);
	
	ФС.СоздатьКаталог(ДопКаталог);
	Сам().дфВвестиЗначение("ИмяКаталога", КаталогТестов);
	дфВыбратьСтроку(1);
	ПроверитьДанныеТеста(0);
	дфВыбратьСтроку(2);
	ПроверитьДанныеТеста(1);
КонецПроцедуры
//--------------------------------------------

Процедура Тест_ПереносТеста() Экспорт
	ФС.СоздатьКаталог(ДопКаталог);
	дфДобавитьТест("Это тест");
	Сам().дфВвестиЗначение("ИмяКаталога_Исходный", КаталогТестов);
	Сам().дфВвестиЗначение("ИмяКаталога_Конечный", ДопКаталог);
	КонтФормы.гХранилищеНаФорме_Исходное.ВыбратьСтроку(2);
	ЭмуляцияВвода("{Enter}");
	Сам().дфВыполнитьФормулу("кнПеренестиВКонечный");
	Сам().ПроверитьРавенство(КонтФормы.СписокТестов_Исходный.КоличествоСтрок(), 1);
	Сам().ПроверитьРавенство(КонтФормы.СписокТестов_Конечный.КоличествоСтрок(), 1);
КонецПроцедуры
//--------------------------------------------

Процедура Тест_СозданиеКаталога() Экспорт
	Сам=Сам();
	СписокТестов=КонтФормы.СписокТестов_Исходный;
	ФС.СоздатьКаталог(КаталогТестов+"\TestFolder");
	//дфДобавитьТест("Это тест");
	Сам.дфВвестиЗначение("ИмяКаталога_Исходный", КаталогТестов);
	Сам.ПроверитьРавенство(СписокТестов.КоличествоСтрок(), 1);
	ЭмуляцияВвода("ДопКаталог{Enter}");
	Сам.дфВыполнитьФормулу("кнСоздатьКаталог1");
	Сам.ПроверитьРавенство(СписокТестов.КоличествоСтрок(), 2);
	Сам.ПроверитьРавенство(СписокТестов.ТекущаяСтрока(), 2);
	СписокТестов.ПолучитьСтрокуПоНомеру(СписокТестов.ТекущаяСтрока());
	Сам.ПроверитьРавенство(СписокТестов.НазваниеТеста, "ДопКаталог");
КонецПроцедуры
//--------------------------------------------

//Процедура Тест_КнопкаВверх() Экспорт
//	фДоступность=КонтФормы.Форма.кнВверх.Доступность();
//	Сам().ПроверитьРавенство(фДоступность, 1);
//	Сам().дфВыполнитьФормулу("кнВверх");
//	Сам().ПроверитьРавенство(СокрЛП(КонтФормы.ИмяКаталога)+"\", КаталогИБ());
//	
//	Сам().дфВвестиЗначение("ИмяКаталога", "C:\");
//	фДоступность=КонтФормы.Форма.кнВверх.Доступность();
//	Сам().ПроверитьРавенство(фДоступность, 0);
//КонецПроцедуры
////--------------------------------------------

Процедура Тест_КопироватьКолонкуОжиданий() Экспорт
	Сам=Сам();
	тзТест=СоздатьОбъект("ТаблицаЗначений");
	тзТест.НоваяКолонка("Число1");
	тзТест.НоваяКолонка("Число2");
	тзТест.НоваяСтрока(); тзТест.Число1=6; тзТест.Число2=12;
	тзТест.НоваяСтрока(); тзТест.Число1=30; тзТест.Число2=40;
	
	КонтФормы.тзКопироватьКолонку(тзТест, "Число1", "", 2);
	Сам().ПроверитьРавенство(тзТест.КоличествоКолонок(), 3);
	Сам().ПроверитьРавенство(тзТест.ПолучитьПараметрыКолонки(3), "Число2");
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(1, 2), 6);
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(2, 2), 30);
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(1, "Число2"), 12);
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(2, "Число2"), 40);
	
	КонтФормы.тзПереместитьКолонку(тзТест, 1, "НовоеЧисло", 2);
	Сам().ПроверитьРавенство(тзТест.КоличествоКолонок(), 3);
	Сам().ПроверитьРавенство(тзТест.ПолучитьПараметрыКолонки(2), "НовоеЧисло");
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(1, "НовоеЧисло"), 6);
	Сам.ПроверитьРавенство(тзТест.ПолучитьЗначение(2, "НовоеЧисло"), 30);
КонецПроцедуры
//--------------------------------------------
