
// Формат хранения условия в таблице условий
// для списка и таблицы значений 
//		значение есть строка, полученная применением метода ЗначенияВСтрокуВнутр к специальному параметру.
//		в строке все символы "0xD" (10) заменены на "\n" (для обеспечения совместимости с форматом хранения тестов)
//
// 		для списка значений 
//			этот параметр - это список из одной-й позиции: 
//				представление "ТЗ", 
//				значение - это таблица значений, в которой колонки "значение, представление, пометка"
//
// 		для таблицы значений 
//			этот параметр - таблица значений

Перем ФлагИспользованияПечатнойФормы Экспорт;
Перем _ТаблицаПечатнойФормы;

Перем _УсловияТестирования; //Список значений
Перем _Ожидание; //Таблица значений
Перем _Каталог;
Перем _Номер;
Перем _КодРазличий Экспорт;

Перем _РасчетчикРезультата; //Проводка, регистр, отчет

Перем _КэшРезультатаТестирования; // кеш результата тестирования

Функция Сам(Конт)
	Возврат Конт;
КонецФункции

// --------------------------------------------- -------------------------------
//
// TODO FAQ
// Вопрос: как добавить новый объект тестирования ?
//
// Ответ:
//		1. В функции "СоздатьСписокВариантовТестирования" (TestBrowser.ert) нужно добавить одну строку
//			ДобавитьВариантТестирования(<ТипТестирования>, <НазваниеТипаТестированияБудетПоказаноВФорме>, <ТипТестируемогоОбъектаИлиСтрока>);
// 		где 3 параметра
//			<ТипТестирования> - будет использоваться в п.2
//			<НазваниеТипаТестированияБудетПоказаноВФорме> - именно это название будет показано на форме браузера тестов в рамке "Что тестируем"
//			<ТипТестируемогоОбъектаИлиСтрока> - тот объект, который будем тестировать.
//				Это может Документ, Справочник или любое другое метаданное, к которому есть доступ у пользователя
//				Есть метаданное не используется, нужно ставить вариант "Строка"
//                                                                             
//		2. Далее в классе TheTest в методе "СоздатьРасчетчикРезультата" нужно добавить строку вида
//			ИначеЕсли Тип=<ТипТестирования> Тогда
//				Возврат СоздатьОбъект(<ИмяКлассаТестирования>);
//
//		3. Далее нужно создать класс <ИмяКлассаТестирования>, унаследовав его от класса Resulter
//			Данный класс должен иметь метод "Выполнить", который должен вернуть таблицу значений.
//			Эта таблица и есть результат теста.
//		
//		Вот и все - но скобки <> естественно в реальном коде нужно удалить :)
// --------------------------------------------- -------------------------------
Функция СоздатьРасчетчикРезультата(Тип)
	Если Тип="Проводки" Тогда
		Результат = СоздатьОбъект("Resulter_Entry");
	
	ИначеЕсли Тип="ДокументТабличнаяЧасть" Тогда
		Результат = СоздатьОбъект("Resulter_DocTable");
	
	ИначеЕсли Тип="Отчет" Тогда
		Результат = СоздатьОбъект("Resulter_Report");  
	
	ИначеЕсли Тип="ОтчетПеч" Тогда  
		Результат = СоздатьОбъект("Resulter_ReportMXL");
	
	ИначеЕсли Тип="ОтчетПроизвольный" Тогда  
		Результат = СоздатьОбъект("Resulter_ReportSimple");

	ИначеЕсли Лев(Тип,8)="Регистр." Тогда
		Результат = СоздатьОбъект("Resulter_Register");
	
	ИначеЕсли Тип ="ДокументЗаписиЖурналаРасчетов" Тогда
		Результат = СоздатьОбъект("Resulter_DocCalcJournalRecord");
	
	ИначеЕсли Тип ="ЗаписиЖурналаРасчетов" Тогда
		Результат = СоздатьОбъект("Resulter_CalcJournalRecord");
	
	ИначеЕсли Тип ="ДокументИзменениеСправочников" Тогда
		Результат = СоздатьОбъект("Resulter_DocRefChange");
		
	Иначе
		Результат=СоздатьОбъект("Resulter"); // Такой тест не пройдет
	
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура УстановитьУсловия(Условия) Экспорт
	_УсловияТестирования=Условия;
КонецПроцедуры

Функция ПолучитьУсловия() Экспорт
	Возврат _УсловияТестирования;
КонецФункции

Функция ПолучитьУсловие(НаименованиеУсловия) Экспорт
	лУсловие = ПолучитьУсловия().Получить(НаименованиеУсловия);
	Если (ПустоеЗначение(лУсловие) = 1) И
		 (Лев(НаименованиеУсловия, 5) <> "Тест_") Тогда
		лУсловие = ПолучитьУсловия().Получить("Тест_"+СокрЛП(НаименованиеУсловия));
	КонецЕсли;
	Возврат лУсловие;
КонецФункции


// из переданного значения применением ЗначениеВСтрокуВнутр получаю строку-представление
// в полученной строке символ 10 заменяется на символ "\n"
//
Функция ЗначениеВСтрокуВнутр_СНормализациейСтрок(Значение)
	
	лРазделительСтрок = Симв(10);

	Возврат СтрЗаменить(СокрЛП(ЗначениеВСтрокуВнутр(Значение)), лРазделительСтрок, "\n");

КонецФункции // ЗначениеВСтрокуВнутр_СНормализациейСтрок

// в каждой строке символ "\n" заменяется на символ 10
// из полученной строки применением ЗначениеИзСтрокиВнутр получаю нормальное значение 
//
Функция ЗначениеИзСтрокиВнутр_СДенормализациейСтрок(ИсходнаяСтрока)
	лРазделительСтрок = Симв(10);
	Возврат ЗначениеИзСтрокиВнутр(СтрЗаменить(СокрЛП(ИсходнаяСтрока), "\n", лРазделительСтрок));
КонецФункции // ЗначениеИзСтрокиВнутр_СДенормализациейСтрок

// получаю список значений, в котором все значения являются нормальными типами и их можно сразу использовать !
// списки и таблицы значений из формата теста преобразуются в обычные списки и таблицы
//		у них верно установлены значения пометки всех строк
//
Функция ПолучитьУсловияКакСписокЗначений() Экспорт
	лУсловия = ПолучитьУсловия().ВСписокЗначений();
	Для к=1 По лУсловия.РазмерСписка() Цикл
		лПредставление = "";
		лЗначение = лУсловия.ПолучитьЗначение(к, лПредставление);
		лТипЗначения = ТипЗначенияСтр(лЗначение);
		Если лТипЗначения <> "Строка" Тогда
			Продолжить;
		КонецЕсли; 
		лЗначение = ЗначениеИзСтрокиВнутр_СДенормализациейСтрок(лЗначение);
		Если ТипЗначения(лЗначение) = 0 Тогда
			Продолжить;
			
		Иначе  // спец.формат для списков или таблиц
			лТипЗначения = ТипЗначенияСтр(лЗначение);
			Если лТипЗначения = "ТаблицаЗначений" Тогда
				лУсловия.УстановитьЗначение(к, лЗначение, лПредставление);

			ИначеЕсли лТипЗначения = "СписокЗначений" Тогда
				лСписок = СоздатьОбъект("ExValueList");
				лСписок.ИзТаблицыЗначенийВместеСПометками(лЗначение.Получить("ТЗ"));
				лУсловия.УстановитьЗначение(к, лСписок.СЗ(), лПредставление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат лУсловия;
КонецФункции

Функция ПолучитьУсловиеНужногоТипа(Значение) Экспорт
	ТипЗначенияУсловия = ТипЗначенияСтр(Значение);

	Если (ТипЗначенияУсловия <> "СписокЗначений") и (ТипЗначенияУсловия <> "ТаблицаЗначений") Тогда
		Возврат Значение;

	ИначеЕсли ТипЗначенияУсловия = "ТаблицаЗначений" Тогда
		Возврат ЗначениеВСтрокуВнутр_СНормализациейСтрок(Значение);
	
	ИначеЕсли ТипЗначенияУсловия = "СписокЗначений" Тогда
		
		лСписок = СоздатьОбъект("ExValueList");
		лСписок.ИзСпискаЗначений(Значение);
		лСписокРезультат = СоздатьОбъект("СписокЗначений");
		лСписокРезультат.Установить("ТЗ", лСписок.ВТаблицуЗначенийВместеСПометками());
		
		Возврат ЗначениеВСтрокуВнутр_СНормализациейСтрок(лСписокРезультат);
	КонецЕсли;
КонецФункции


Процедура УстановитьОжидание(Ожидание) Экспорт
	_Ожидание=Ожидание;
КонецПроцедуры

Функция ПолучитьОжидание() Экспорт
	Возврат _Ожидание;
КонецФункции

Функция ОбъектТестирования() Экспорт
	Возврат ПолучитьУсловие("Объект");
КонецФункции

Функция ЧтоТестируем() Экспорт
	Возврат ПолучитьУсловие("ЧтоТестируем");
КонецФункции

Функция ТестируемОтчет() Экспорт
	лЧтоТестируем = Сам(Контекст).ЧтоТестируем();
	Если (лЧтоТестируем = "ОтчетПеч") или (лЧтоТестируем = "Отчет") или (лЧтоТестируем = "ОтчетПроизвольный") Тогда
		Возврат 1;
	КонецЕсли; 
	Возврат 0;
КонецФункции

Процедура Конструктор()
	_УсловияТестирования=СоздатьОбъект("СписокЗначений");
	_Ожидание=СоздатьОбъект("ТаблицаЗначений");
	_РасчетчикРезультата = СоздатьРасчетчикРезультата("Сломаться");

	_ТаблицаПечатнойФормы = "";        
	ФлагИспользованияПечатнойФормы = 1;
КонецПроцедуры

Функция НайтиПоследнееВхождение(Знач Стр,Что) Экспорт //TODO а нужен ли Экспорт ???
	Поз=0;
	Пока 1=1 Цикл
		ЛокПоз = Найти(Стр,Что);
		Если ЛокПоз=0 Тогда
			Возврат Поз;
		КонецЕсли;
		Поз = Поз+ЛокПоз;
		Стр = Сред(Стр,ЛокПоз+1);
	КонецЦикла;
КонецФункции	// НайтиПоследнееВхождение

Функция КаталогФайла(ИмяФайла) Экспорт                                        
	// устраним различия между слешами
	Возврат Лев(ИмяФайла,НайтиПоследнееВхождение(СтрЗаменить(ИмяФайла,"/","\"),"\"));
КонецФункции	// КаталогФайла 
                                 
// проверяю, число ли переданный параметр - удобно для сравнения (код от Eugene G)
Функция ВернутьКодСимвола(Стр, Ук)
	Ук=Ук+1;
	Возврат КодСимв(Сред(Стр,Ук,1));
КонецФункции // ВернутьКодСимвола

Процедура ПропуститьЦифры(СтрЧисло, Ук)
	ТекКод = ВернутьКодСимвола(СтрЧисло, Ук);
	Пока (ТекКод>=48) И (ТекКод<=57) Цикл
	 ТекКод = ВернутьКодСимвола(СтрЧисло, Ук);
	КонецЦикла;
	Ук=Ук-1;
КонецПроцедуры // ПропуститьЦифры

Функция ЭтоЧисло(СтрЧисло)
	Если (ТипЗначенияСтр(СтрЧисло) <> "Число") И 
		 (ТипЗначенияСтр(СтрЧисло) <> "Строка") Тогда
		Возврат 0; // мало ли, какое там представление у агрегатного типа... у того же счета к примеру - вполне число может оказаться.
	КонецЕсли;
	Если СокрЛП(СтрЧисло) = "-" Тогда
		Возврат 0;
	КонецЕсли;
	


	// TODO Ужасная и непрозрачная конструкция.
	Ук=0;
	ДлинаЧисла = СтрДлина(СокрЛП(СтрЧисло));
	
	Если ВернутьКодСимвола(СтрЧисло,Ук)<>КодСимв("-") Тогда
	 Ук = Ук - 1;
	КонецЕсли;
	
	ПропуститьЦифры(СтрЧисло, Ук);
	
	Если Ук=ДлинаЧисла Тогда
	 Возврат 1;
	КонецЕсли;
	
	Если ВернутьКодСимвола(СтрЧисло,Ук)<>КодСимв(".") Тогда
	 Возврат 0;
	КонецЕсли;
	
	ПропуститьЦифры(СтрЧисло, Ук);
	
	Если ДлинаЧисла>Ук Тогда
	 Возврат 0;
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЭтоЧисло

Функция РавныСТочностью(Знач Значение1, Знач Значение2, ТочностьСравненияДляЧисел)
	Если (ПустоеЗначение(Значение1) = 1) и
		 (ПустоеЗначение(Значение2) = 1) Тогда
		Возврат 1; // В задаче Фанктеста пустые значения разных типов равны.
	КонецЕсли;
	
	// Числа сравниваем с заданной точностью
	Если (ЭтоЧисло(Значение1)=1) И (ЭтоЧисло(Значение2)=1)  Тогда
		Значение1 = Число(Значение1);
		Значение2 = Число(Значение2);
	КонецЕсли;
	Если (ТипЗначенияСтр(Значение1) = "Число") и (ТипЗначенияСтр(Значение2) = "Число") Тогда
		Если Макс(Значение1, Значение2) - Мин(Значение1, Значение2) <= ТочностьСравненияДляЧисел Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Строки сравниваем с учетом крайних пробелов или без их учета.
	Если (ТипЗначения(Значение1) = ТипЗначения(Значение2)) и (ТипЗначенияСтр(Значение1) = "Строка") Тогда                          
		Если Число(ПолучитьУсловие("Тест_НеУчитыватьПробелыВСтроках")) = 1 Тогда
			Значение1 = СокрЛП(Значение1);
			Значение2 = СокрЛП(Значение2);
		КонецЕсли;
	КонецЕсли;
	
	// Счет можно сравнить со строкой (по коду)
	Если ТипЗначенияСтр(Значение1) = "Счет" Тогда
		Значение1 = Значение1.Код;
	КонецЕсли;
	Если ТипЗначенияСтр(Значение2) = "Счет" Тогда
		Значение2 = Значение2.Код;
	КонецЕсли;
	
	// Все, что могли - привели к общему знаменателю.
	Если Значение1 = Значение2 Тогда                          
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;     
	
	
КонецФункции	// РавныСТочностью

Процедура Инит(Каталог,Номер) Экспорт
			
	ИмяСпискаТестов="\testlst.txt";
	
	_Каталог=Каталог;
	_Номер=Номер;
	
	/////////
	//Условия
	Т=СоздатьОбъект("Текст");
	Т.Открыть(Каталог+ИмяСпискаТестов);

	ОписаниеТеста=СоздатьОбъект("ExValueList");
	ОписаниеТеста.ВсеИзСтрокиСРазделителями(Т.ПолучитьСтроку(Номер+1));
	ИмяФайлаРезультатов=ОписаниеТеста.Получить("ИмяФайлаРезультатов");
	
	Т.Открыть(Каталог+"\"+ИмяФайлаРезультатов);

	УсловияТеста=СоздатьОбъект("ExValueList");
	УсловияТеста.ВсеИзСтрокиСРазделителями(Т.ПолучитьСтроку(1));
	

	УстановитьУсловия(УсловияТеста);
	
	/////////
	//Ожидания
	Т.УдалитьСтроку(1);

	Ожидание=СоздатьОбъект("ExTableValue");
	Ожидание.ИзТекста(Т);
	
	УстановитьОжидание(Ожидание);
	
	Если ТипЗначенияСтр(ОбъектТестирования())="Документ" Тогда
		Если ОбъектТестирования().Выбран()=0 Тогда
			_РасчетчикРезультата = СоздатьРасчетчикРезультата("Сломаться");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	_РасчетчикРезультата = СоздатьРасчетчикРезультата(ЧтоТестируем());

КонецПроцедуры

Функция ПолучитьКаталог() Экспорт
	Возврат _Каталог;
КонецФункции

Функция ПолучитьНомер() Экспорт
	Возврат _Номер;
КонецФункции

Процедура НормализоватьСтроки(Таблица)
	Для С = 1 По Таблица.КоличествоСтрок() Цикл
		Для К = 1 По Таблица.КоличествоКолонок() Цикл
			Значение = Таблица.ПолучитьЗначение(С, К);
			Если ТипЗначенияСтр(Значение) = "Строка" Тогда
				Значение = СтрЗаменить(СокрЛП(Значение), РазделительСтрок, "\n");
				Таблица.УстановитьЗначение(С ,К , Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция Выполнить() Экспорт
	_КэшРезультатаТестирования = _РасчетчикРезультата.Выполнить(Сам(Контекст));
	Попытка // вдруг не таблица значений
		НормализоватьСтроки(_КэшРезультатаТестирования);
	Исключение
	КонецПопытки;
	
	Возврат _КэшРезультатаТестирования;
КонецФункции
                  
Процедура Сортировать(Т1) // TODO Move method в ExValueTable
	СтрокаСортировки = "";
	Разделитель      = "";
	Для а=1 по Т1.КоличествоКолонок() Цикл
		СтрокаСортировки = СтрокаСортировки + Разделитель + Строка(а);
		Разделитель = ",";		
	КонецЦикла;
	Т1.Сортировать(СтрокаСортировки);
КонецПроцедуры

Функция СравнитьТаблицыЗначений(Т1,Т2,КакойОтвет, ТочностьСравненияДляЧисел = 0, ФлагСортировкиСтрокВТаблицах = 0) Экспорт

	//При этом сравнении в структуре Т2 может оказаться больше колонок, чем в Т1,
	// так что для абсолютного точного сравнения эту процедуру нужно гонять дважды
	// (второй раз таблицы надо поменять местами).
	
// -- отсортируем строчки по всем колонкам для того чтобы сравнение не зависело от порядка строк 
	Если ФлагСортировкиСтрокВТаблицах = 1 Тогда
		Сортировать(Т1);
		Сортировать(Т2);
	КонецЕсли;

	Для С=1 По Т1.КоличествоСтрок() Цикл
		Для К=1 По Т1.КоличествоКолонок() Цикл
			ИмяКолонки=Т1.ПолучитьПараметрыКолонки(К);
			Значение1=Т1.ПолучитьЗначение(С,К);
			Значение2=Т2.ПолучитьЗначение(С,ИмяКолонки);
			//Пустые значения разных типов 1С-м не считаются равными :(
			Если (ПустоеЗначение(Значение1)=1) И 
				 (ПустоеЗначение(Значение2)=1) Тогда
				Продолжить;
			КонецЕсли;
			//Теперь можем сравнивать.

			Если РавныСТочностью(Значение1, Значение2, ТочностьСравненияДляЧисел) = 0 Тогда

				Если КакойОтвет="Строка" Тогда
					Возврат "Не совпадает значение в строке "+С+", в колонке "+ИмяКолонки+РазделительСтрок+
						"Ожидается "+Значение1+" ("+ТипЗначенияСтр(Значение1)+"), получено "+Значение2+" ("+ТипЗначенияСтр(Значение2)+").";
				Иначе
					Возврат 3;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	 
	// TODO НАДО ПОДУМАТЬ НАД ЭТИМ ВОТ 
	//Если ЗначениеВСтроку(Т1) <> ЗначениеВСтроку(Т2) Тогда 
	//	Если КакойОтвет="Строка" Тогда
	//		Возврат "Значения не совпадают";
	//	Иначе
	//		Возврат 3;		
	//	КонецЕсли;  
	//КонецЕсли;
	
	Если КакойОтвет="Строка" Тогда
		Возврат "Таблицы идентичны";
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СравнитьСтруктуруТаблиц(пТЗ1, пТЗ2)
	Если пТЗ1.КоличествоСтрок() <> пТЗ2.КоличествоСтрок() Тогда
		Возврат 1; // код ошибки "Разное количество строк в таблицах"
	КонецЕсли;
	
	Если пТЗ1.КоличествоСтрок()=0 Тогда
		Возврат 0; // ОК - пустые таблицы всегда одинаковы
	КонецЕсли;
	
	//Проверим структуру колонок
	ИменаКолонок2=СоздатьОбъект("СписокЗначений");
	Для К=1 По пТЗ2.КоличествоКолонок() Цикл
		ИменаКолонок2.ДобавитьЗначение(пТЗ2.ПолучитьПараметрыКолонки(К));
	КонецЦикла;
	Для К=1 По пТЗ1.КоличествоКолонок() Цикл
		ИмяКолонки=пТЗ1.ПолучитьПараметрыКолонки(К);
		Если ИменаКолонок2.Принадлежит(ИмяКолонки)=0 Тогда   
			Возврат 2; //  код ошибки "В таблице результатов отсутствует колонка"
		КонецЕсли;
	КонецЦикла;
	
	Если Число(ПолучитьУсловие("Тест_СтрогоеСравнениеКолонок")) = 1 Тогда
		//Проверим структуру колонок в другую сторону тоже
		ИменаКолонок1=СоздатьОбъект("СписокЗначений");
		Для К=1 По пТЗ1.КоличествоКолонок() Цикл
			ИменаКолонок1.ДобавитьЗначение(пТЗ1.ПолучитьПараметрыКолонки(К));
		КонецЦикла;
		Для К=1 По пТЗ2.КоличествоКолонок() Цикл
			ИмяКолонки=пТЗ2.ПолучитьПараметрыКолонки(К);
			Если ИменаКолонок1.Принадлежит(ИмяКолонки)=0 Тогда   
				Возврат 4; //  код ошибки "В таблице результата присутствует лишняя колонка"
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
КонецФункции
	

Функция Различны()
	ТаблицаРезультатов=Выполнить();
	ТаблицаОжиданий=ПолучитьОжидание();
	
	Если (ТипЗначенияСтр(ТаблицаРезультатов)<>"ExTableValue") И
		 (ТипЗначенияСтр(ТаблицаРезультатов)<>"ТаблицаЗначений") Тогда
		Возврат -1; //Не таблица значений вообще
	КонецЕсли;
	
	НормализоватьСтроки(_КэшРезультатаТестирования);
	НормализоватьСтроки(ТаблицаРезультатов);
	
	КодОшибки = СравнитьСтруктуруТаблиц(ТаблицаОжиданий, ТаблицаРезультатов);
	Если КодОшибки <> 0 Тогда
		Возврат КодОшибки;
	КонецЕсли;

	лТочностьСравнения = Число(ПолучитьУсловие("ТочностьСравнения"));
	лФлагСортировкиСтрокВТаблицах = Число(ПолучитьУсловие("Тест_СортироватьСтроки"));
	Возврат СравнитьТаблицыЗначений(ТаблицаОжиданий, ТаблицаРезультатов, "Число", лТочностьСравнения, лФлагСортировкиСтрокВТаблицах);
КонецФункции

Функция Сравнить(Таблица1, Таблица2, ТочностьСравнения = 0, лФлагСортировкиСтрокВТаблицах = 0)
	Если Таблица1.КоличествоСтрок()<>Таблица2.КоличествоСтрок() Тогда
		Возврат "Разное количество строк в таблицах";
	КонецЕсли;
	
	//Проверим структуру колонок
	ИменаКолонок2=СоздатьОбъект("СписокЗначений");
	Для К=1 По Таблица2.КоличествоКолонок() Цикл
		ИменаКолонок2.ДобавитьЗначение(Таблица2.ПолучитьПараметрыКолонки(К));
	КонецЦикла;
	Для К=1 По Таблица1.КоличествоКолонок() Цикл
		ИмяКолонки=Таблица1.ПолучитьПараметрыКолонки(К);
		Если ИменаКолонок2.Принадлежит(ИмяКолонки)=0 Тогда
			Возврат "В таблице результатов отсутствует колонка "+ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СравнитьТаблицыЗначений(Таблица1,Таблица2,"Строка", ТочностьСравнения, лФлагСортировкиСтрокВТаблицах);

КонецФункции

Функция ОшибкаПоКоду(КодОшибки) Экспорт
	Если КодОшибки=1 Тогда
		Возврат "Разное количество строк";
	ИначеЕсли КодОшибки=2 Тогда
		Возврат "В результате меньше колонок, чем ожидалось";
	ИначеЕсли КодОшибки=3 Тогда
		Возврат "Не совпадают значения в ячейке таблицы";
	ИначеЕсли КодОшибки=4 Тогда
		Возврат "В результате больше колонок, чем ожидалось";
	ИначеЕсли КодОшибки=-1 Тогда
		Возврат "Полученный результат - не таблица значений";
	Иначе
		Возврат "Неизвестный код ошибки "+КодОшибки;
	КонецЕсли;
КонецФункции

Процедура УдалитьОдинаковыеЗначенияВТаблицах(Таб1, Таб2, ТочностьСравненияДляЧисел, лСтрокаНеудаляемыхСтрокТаблицы, лСтрокаНеудаляемыхКолонок, ТабСтрокТаблиц, ТабКолонокТаблиц)
	// использую сравнение каждой ячейки

	МаксОжиданиеСтр = Таб1.КоличествоСтрок();
	МаксРезультатСтр = Таб2.КоличествоСтрок(); 

	МаксОжиданиеКол = Таб1.КоличествоКолонок();
	МаксРезультатКол = Таб2.КоличествоКолонок(); 
	 
	МаксКол = Макс(МаксОжиданиеКол,МаксРезультатКол);

	// для учета сдвига номеров строк/колонок при удалении одинаковых значений
	ТабКолонокТаблиц = СоздатьОбъект("Общие.ТаблицаЗначений");
	ТабКолонокТаблиц.НоваяКолонка("Старая", "Число");
	ТабКолонокТаблиц.НоваяКолонка("Новая", "Число");
	
	ТабСтрокТаблиц = СоздатьОбъект("Общие.ТаблицаЗначений");
	ТабСтрокТаблиц.НоваяКолонка("Старая", "Число");
	ТабСтрокТаблиц.НоваяКолонка("Новая", "Число");
	
	Для к=-Макс(МаксОжиданиеСтр,МаксРезультатСтр) по -1 Цикл 
		Стр = -к;                   
		
		ТабСтрокТаблиц.НоваяСтрока();
		ТабСтрокТаблиц.Новая = Стр;
		ТабСтрокТаблиц.Старая = Стр;
		Если Найти(лСтрокаНеудаляемыхСтрокТаблицы, "!"+Стр+"!") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		фОставитьСтроку = 0;
		Для Кол=1 по МаксКол Цикл
			Знач1 = "";
			Знач2 = "";
			
			Попытка
				Знач1 = Таб1.ПолучитьЗначение(Стр,Кол);		
			Исключение
			КонецПопытки;   
			
			Попытка
				Знач2 = Таб2.ПолучитьЗначение(Стр,Кол);		
			Исключение
			КонецПопытки;  
			
			Если РавныСТочностью(Знач1, Знач2, ТочностьСравненияДляЧисел) = 0 Тогда
				фОставитьСтроку = 1;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если фОставитьСтроку = 0 Тогда
			Таб1.УдалитьСтроку(Стр);
			Таб2.УдалитьСтроку(Стр);
			
			ТабСтрокТаблиц.ВыбратьСтроки();
			Пока ТабСтрокТаблиц.ПолучитьСтроку() = 1 Цикл
				ТабСтрокТаблиц.Новая = ТабСтрокТаблиц.Новая - 1; 
			КонецЦикла;
			ТабСтрокТаблиц.УдалитьСтроку(ТабСтрокТаблиц.КоличествоСтрок());
		КонецЕсли;
	КонецЦикла;
	
	// -- удалить одинаковые колонки
	МаксОжиданиеСтр = Таб1.КоличествоСтрок();
	МаксРезультатСтр = Таб2.КоличествоСтрок(); 
	
	Для Кол1 = -МаксКол по -1 Цикл
		Кол = -Кол1;
		
		ТабКолонокТаблиц.НоваяСтрока();
		ТабКолонокТаблиц.Новая = Кол;
		ТабКолонокТаблиц.Старая = Кол;
		Если Найти(лСтрокаНеудаляемыхКолонок, "!"+Кол+"!") > 0 Тогда
			Продолжить;
		КонецЕсли;
		фУдалитьКолонку = 1;
		Для Стр = 1 по Макс(МаксОжиданиеСтр,МаксРезультатСтр) Цикл 
			Знач1 = "";
			Знач2 = "";
			
			Попытка
				Знач1 = Таб1.ПолучитьЗначение(Стр,Кол);		
			Исключение
			КонецПопытки;   
			
			Попытка
				Знач2 = Таб2.ПолучитьЗначение(Стр,Кол);		
			Исключение
			КонецПопытки;  
	
			Если РавныСТочностью(Знач1, Знач2, ТочностьСравненияДляЧисел) = 0 Тогда
				фУдалитьКолонку = 0;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если фУдалитьКолонку = 1 Тогда
			Таб1.УдалитьКолонку(Кол);
			Таб2.УдалитьКолонку(Кол);
			
			ТабКолонокТаблиц.ВыбратьСтроки();
			Пока ТабКолонокТаблиц.ПолучитьСтроку() = 1 Цикл
				ТабКолонокТаблиц.Новая = ТабКолонокТаблиц.Новая - 1; 
			КонецЦикла;
			ТабКолонокТаблиц.УдалитьСтроку(ТабКолонокТаблиц.КоличествоСтрок());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// УдалитьОдинаковыеЗначенияВТаблицах

Процедура ВывестиРазницувТаблицахВПечатнуюФорму(Т, Таб1, Таб2, ФлагПоказыватьТолькоРазличия, ТочностьСравненияДляЧисел, лСтрокаНеудаляемыхСтрокТаблицы, лСтрокаНеудаляемыхКолонок, ТабСтрокТаблиц, ТабКолонокТаблиц)
				
	МаксОжиданиеКол = Таб1.КоличествоКолонок();
	МаксРезультатКол = Таб2.КоличествоКолонок(); 
	 
	МаксКол = Макс(МаксОжиданиеКол,МаксРезультатКол);
	
	Для Кол=1 по МаксКол Цикл
		Заголовок = "";
		Попытка
			Заголовок = Таб1.ПолучитьПараметрыКолонки(Кол);
		Исключение
		КонецПопытки;   
		
		Если Кол=1 Тогда
			Т.ВывестиСекцию("Заголовок|Колонка");
		Иначе
			Т.ПрисоединитьСекцию("Заголовок|Колонка");
		КонецЕсли;
		
	КонецЦикла;
	
	МаксОжиданиеСтр = Таб1.КоличествоСтрок();
	МаксРезультатСтр = Таб2.КоличествоСтрок(); 
	
	Для Стр=1 по Макс(МаксОжиданиеСтр,МаксРезультатСтр) Цикл 
		Для Кол=1 по МаксКол Цикл
			Знач1 = "";
			Знач2 = "";
			
			Попытка
				Знач1 = Таб1.ПолучитьЗначение(Стр,Кол);
			Исключение
			КонецПопытки;
			
			Попытка
				Знач2 = Таб2.ПолучитьЗначение(Стр,Кол);
			Исключение
			КонецПопытки;
			
			Если РавныСТочностью(Знач1, Знач2, ТочностьСравненияДляЧисел) = 0 Тогда
	
				Секция = "СтрокаКрасным";
			Иначе
				Если ФлагПоказыватьТолькоРазличия = 1 Тогда
					лКолонкаВИсходнойТаблице = ТабКолонокТаблиц.НайтиИПолучить("Новая", Кол, "Старая");
					лСтрокаВИсходнойТаблице = ТабСтрокТаблиц.НайтиИПолучить("Новая", Стр, "Старая");
					Если Найти(лСтрокаНеудаляемыхСтрокТаблицы, "!"+лСтрокаВИсходнойТаблице+"!") = 0 Тогда
						Если Найти(лСтрокаНеудаляемыхКолонок, "!"+лКолонкаВИсходнойТаблице+"!") = 0 Тогда
							Знач1 = ""; Знач2 = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Секция = "Строка";
			КонецЕсли;
			
			Если Кол=1 Тогда
				Т.ВывестиСекцию(Секция+"|Колонка");
			Иначе
				Т.ПрисоединитьСекцию(Секция+"|Колонка");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	// ВывестиРазницувТаблицахВПечатнуюФорму
// -- завершение

// TODO напрашивается класс DifferenceVisualizer
Процедура ВывестиТаблицуРазницы(фПоказыватьТолькоРазличия, ПутьКФайлуПечатнойФормы, ПарамОжидания, ПарамРезультат, Текст, ТочностьСравненияДляЧисел=0)
	
	Ожидания = СоздатьОбъект("ТаблицаЗначений");
	ПарамОжидания.Выгрузить(Ожидания);
	Результат = СоздатьОбъект("ТаблицаЗначений");
	ПарамРезультат.Выгрузить(Результат);

// -- отсортируем строчки по всем колонкам для того чтобы сравнение не зависело от порядка строк 
	лФлагСортировкиСтрокВТаблицах = Число(ПолучитьУсловие("Тест_СортироватьСтроки"));
	Если лФлагСортировкиСтрокВТаблицах = 1 Тогда
		Сортировать(Ожидания);
		Сортировать(Результат);
	КонецЕсли;
	
	Если фПоказыватьТолькоРазличия = 1 Тогда

		лСтрокаНеудаляемыхСтрокТаблицы = Строка(ПолучитьУсловие("Тест_ОставлятьСтрокиТаблицы"));
		лСтрокаНеудаляемыхКолонок = Строка(ПолучитьУсловие("ОставлятьКолонкиТаблицы"));
    
		ТабСтрокТаблиц = "";
		ТабКолонокТаблиц = "";
		УдалитьОдинаковыеЗначенияВТаблицах(Ожидания, Результат, ТочностьСравненияДляЧисел, лСтрокаНеудаляемыхСтрокТаблицы, лСтрокаНеудаляемыхКолонок, ТабСтрокТаблиц, ТабКолонокТаблиц);		
	
	КонецЕсли; // только различия

	//лРаботаСДлиннымиСтроками = СоздатьОбъект("Общие.ДлинныеСтроки"); // TODO - работа с длинными строкам при выводе на экран	
	
	Пром=СоздатьОбъект("ExTableValue");
	
	Текст.ДобавитьСтроку(".................");
	Пром.ИзТаблицыЗначений(Ожидания);
	Текст.ДобавитьСтроку("Ожидалось...");
	Текст.ДобавитьСтроку(""+Пром.ВСтроку()); 
	//лРаботаСДлиннымиСтроками.ДобавитьСтрокуВТекст(Текст,""+Пром.ВСтроку());  // TODO - работа с длинными строкам при выводе на экран

	Пром.ИзТаблицыЗначений(Результат);
	Текст.ДобавитьСтроку(".................");
	Текст.ДобавитьСтроку("Получилось...");
	Текст.ДобавитьСтроку(""+Пром.ВСтроку());   
	
	// покажу номер и название теста в таблице
	НазваниеТеста	= ПолучитьУсловие("НазваниеТеста");
	
	Если ФлагИспользованияПечатнойФормы = 1 Тогда
		Если _ТаблицаПечатнойФормы = "" Тогда
			Т = СоздатьОбъект("Таблица");  
			Т.ИсходнаяТаблица(ПутьКФайлуПечатнойФормы);
		
			лПредставлениеТеста = "Список не прошедших тестов";
			Т.ВывестиСекцию("ПредставлениеТеста");
		
			_ТаблицаПечатнойФормы = Т;
		Иначе
			Т = _ТаблицаПечатнойФормы;
		КонецЕсли;
	
		// выведем табличку разницы
		
		лПредставлениеТеста = _Каталог+" Тест №"+_Номер+" - "+НазваниеТеста;
		Т.ВывестиСекцию("ПредставлениеТеста");

		лФлагПоказыватьТолькоРазличия = Число(ПолучитьУсловие("Тест_ПоказыватьТолькоРазличия"));
		лСтрокаНеудаляемыхСтрокТаблицы = Строка(ПолучитьУсловие("Тест_ОставлятьСтрокиТаблицы"));
		лСтрокаНеудаляемыхКолонок = Строка(ПолучитьУсловие("ОставлятьКолонкиТаблицы"));

		ВывестиРазницувТаблицахВПечатнуюФорму(Т, Ожидания, Результат, лФлагПоказыватьТолькоРазличия, ТочностьСравненияДляЧисел, 
			лСтрокаНеудаляемыхСтрокТаблицы, лСтрокаНеудаляемыхКолонок, ТабСтрокТаблиц, ТабКолонокТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры	// ВывестиТаблицуРазницы

Процедура РассказатьОРазличиях(Текст)
	Ожидания=ПолучитьОжидание();
	Результат = _КэшРезультатаТестирования; // TODO инкапсулировать _КэшРезультатаТестирования в Выполнить()

	СписокУсловий=ПолучитьУсловия();
	
	Текст.ДобавитьСтроку("=====================");
	Текст.ДобавитьСтроку(_Каталог+" Тест №"+_Номер);
	Текст.ДобавитьСтроку("--------------------------");
	Текст.ДобавитьСтроку("");
	Текст.ДобавитьСтроку("Тест не пройден. "+ОшибкаПоКоду(_КодРазличий));
	Если _КодРазличий = 1 Тогда
		Текст.ДобавитьСтроку("Ожидалось строк: "+Ожидания.КоличествоСтрок()+". Получилось строк: "+Результат.КоличествоСтрок()+".");
	КонецЕсли;
	Текст.ДобавитьСтроку("");

	Если _КодРазличий=3 Тогда
		лТочностьСравнения = Число(ПолучитьУсловие("ТочностьСравнения"));
		лФлагСортировкиСтрокВТаблицах = Число(ПолучитьУсловие("Тест_СортироватьСтроки"));
		Текст.ДобавитьСтроку(Сравнить(Ожидания, Результат, лТочностьСравнения, лФлагСортировкиСтрокВТаблицах));

	ИначеЕсли _КодРазличий=-1 Тогда
		Текст.ДобавитьСтроку("Полученный результат - не таблица значений.");
		Текст.ДобавитьСтроку("Тип значения результата - "+ТипЗначенияСтр(Результат));
		Текст.ДобавитьСтроку("Значение результата - "+Результат);
		Возврат;
	КонецЕсли;
	Текст.ДобавитьСтроку("Объект - "+ПолучитьУсловие("Объект"));

	Для к=1 По СписокУсловий.РазмерСписка() Цикл
		Представление = "";
		Значение = СписокУсловий.ПолучитьЗначение(к, Представление);
		Если (Представление = "ЧтоТестируем") или (Представление = "Объект") Тогда
			Продолжить;
		КонецЕсли;     
		Текст.ДобавитьСтроку(Представление+" - "+Значение);
	КонецЦикла;

	Если ФлагИспользованияПечатнойФормы = 1 Тогда
	    Путь = КаталогФайла(Сам(Контекст).ПолучитьПуть());
		        
		ПутьКФайлу = Путь+"t.mxl";
		
		Если ФС.СуществуетФайл(ПутьКФайлу)=0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПутьКФайлу = "";
	КонецЕсли; 
	
// -- покажу только те строки, которые различаются
	лТочностьСравнения = Число(ПолучитьУсловие("ТочностьСравнения"));
	лФлагПоказыватьТолькоРазличия = Число(ПолучитьУсловие("Тест_ПоказыватьТолькоРазличия"));
	ВывестиТаблицуРазницы(лФлагПоказыватьТолькоРазличия, ПутьКФайлу, Ожидания, Результат, Текст, лТочностьСравнения);
	
КонецПроцедуры

Функция Тестировать(ТаблицаПечатнойФормы) Экспорт
    Результат = СоздатьОбъект("TextTestResult");
	
	_ТаблицаПечатнойФормы = ТаблицаПечатнойФормы;
	
	_КодРазличий=Различны();
	Если _КодРазличий=0 Тогда
		Возврат Результат.вСтроку();
	КонецЕсли;

	РассказатьОРазличиях(Результат);
	ТаблицаПечатнойФормы = _ТаблицаПечатнойФормы;
		
	Возврат Результат;
	
КонецФункции

Функция ЕстьЗнакДиеза() Экспорт
	Если Прав(Сам(Контекст).ОбъектТестирования(), 1) = "#" Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции // ЕстьЗнакДиеза

Функция ОткрыватьОтчетВНовомОкне() Экспорт
	Если Сам(Контекст).ЕстьЗнакДиеза() = 1 Тогда
		Возврат 1;
	ИначеЕсли Сам(Контекст).ПолучитьУсловие("Тест_ОткрыватьОтчетВНовомОкне") = 1 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьИмяОтчета() Экспорт
	Результат = Сам(Контекст).ОбъектТестирования();
	Если Сам(Контекст).ОткрыватьОтчетВНовомОкне() = 1 Тогда
		Если Сам(Контекст).ЕстьЗнакДиеза() = 1 Тогда
			Результат = Лев(Результат, СтрДлина(Результат)-1); // отрежем концевой "#"
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

////////////////////////////////////////////

Функция ОткрытьФормуИПолучитьВсеРеквизиты() Экспорт
	Если Сам(Контекст).ТестируемОтчет() = 1 Тогда
		Попытка
			Возврат _РасчетчикРезультата.ОткрытьФормуИПолучитьВсеРеквизиты(Сам(Контекст));
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат СоздатьОбъект("ТаблицаЗначений");
КонецФункции	// ОткрытьФормуИПолучитьВсеРеквизиты

////////////////////////////////////////////
// возвращает 1 - удачно, 0 - неудачно
Функция ОткрытьФормуСУсловиямиТеста() Экспорт

	Если Сам(Контекст).ТестируемОтчет() = 1 Тогда
		Попытка
			лКонтекстФормы = _РасчетчикРезультата.ОткрытьФормуСУсловиямиТеста(Сам(Контекст));
			Если ТипЗначенияСтр(лКонтекстФормы) = 100 Тогда
				Возврат 1;
			КонецЕсли;
			Возврат 0;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат 0; // неудача

КонецФункции	// ОткрытьФормуСУсловиямиТеста

