
Функция Сам(Конт)
	Возврат Конт;
КонецФункции

Функция ВернутьНаименованиеУсловия_ФормулаЗапуска() Экспорт
	Возврат "_ФормулаЗапуска";
КонецФункции

// Общий метод классов Resulter_Report и Resulter_ReportMXL
Функция ОткрытьФормуОтчета(Тест, ПараметрыДляОтчета) Экспорт
	
	КонтекстФормы = ПараметрыДляОтчета;

	// Проверим: существует ли подобный отчет/обработка
	// TODO Перенести эту проверку в TheTest::Инит()
	лНаименованиеОбработки = Тест.ПолучитьИмяОтчета();
	// использую тот факт, что в названии отчета\обработки не может быть таких символов
	Если (Найти(лНаименованиеОбработки,":") > 0) или
		 (Найти(лНаименованиеОбработки,"\") > 0) Тогда

		Если ФС.СуществуетФайл(КаталогИБ() + лНаименованиеОбработки) = 1 Тогда
			лНаименованиеОбработки = КаталогИБ() + лНаименованиеОбработки;
		ИначеЕсли ФС.СуществуетФайл(лНаименованиеОбработки) = 0 Тогда //ВнешнийОтчет
			Сообщить("Форма "+лНаименованиеОбработки+" не существует.");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ФС.СуществуетФайл(лНаименованиеОбработки)=1 Тогда //ВнешнийОтчет
		Если Тест.ОткрыватьОтчетВНовомОкне() = 1 Тогда
			ОткрытьФорму("Отчет#",КонтекстФормы, лНаименованиеОбработки);
		Иначе
			ОткрытьФорму("Отчет",КонтекстФормы, лНаименованиеОбработки);
		КонецЕсли;
	Иначе //В конфигурации  
// TODO проверить наличие отчета/обработки в конфигурации		
		ОткрытьФорму(Тест.ОбъектТестирования(), КонтекстФормы); // Способ открытия содержится в свойствах теста
	КонецЕсли;

	Возврат КонтекстФормы;
	
КонецФункции

// получение атрибутов 
//Возможные значения типов атрибутов формы
//1  - STATIC (Текст)
//2  - 1CEDIT (Поле ввода)
//3  - BUTTON (Кнопка)
//4  - 1CGROUPBOX (Рамка группы)
//5  - 1CEDIT (Колонка многострочной части редактируемая)
//8  - SysTreeView32 (Дерево групп)
//9  - STATIC (Колонка многострочной части с пикторгаммой или просто текстовая)
//10 - PICTURE (Картинка)
//11 - LISTBOX (Список)
//12 - CHECKBOX (Флажок)
//13 - RADIO (Переключатель)
//14 - COMBOBOX (Поле со списком)
//15 - TABLE (Таблица)
Функция СоздатьТаблицуСоответствияЭлементовФормы()
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб.НоваяКолонка("ИдентификаторТипа", "Число");
	Таб.НоваяКолонка("ТипЭлемента", "Строка");
//	Таб.НоваяКолонка("ФлагИспользования", "Число");
//	Таб.НоваяКолонка("ФлагПереключателя", "Число");
	Таб.НоваяКолонка("ТипДанных", "Строка");
	
	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 2;
	Таб.ТипЭлемента = "Поле ввода";
	Таб.ТипДанных = "";
	
	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 5;
	Таб.ТипЭлемента = "Колонка многострочной части";
	Таб.ТипДанных = "";

	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 11;
	Таб.ТипЭлемента = "Список";
	Таб.ТипДанных = "";

	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 12;
	Таб.ТипЭлемента = "Флажок";
	Таб.ТипДанных = "";

	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 13;
	Таб.ТипЭлемента = "Переключатель";
	Таб.ТипДанных = "";

	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 14;
	Таб.ТипЭлемента = "Поле со списком";
	Таб.ТипДанных = "";

	Таб.НоваяСтрока();
	Таб.ИдентификаторТипа = 15;
	Таб.ТипЭлемента = "Таблица";
	Таб.ТипДанных = "";

	Таб.Сортировать("ИдентификаторТипа");
	Возврат Таб;
	
КонецФункции	// СоздатьТаблицуСоответствияЭлементовФормы

// попытаюсь найти формулы на кнопках, с помощью которых запускается отчет 
Функция НайтиПодходящуюФормулуЗапускаОтчета(ФормаРасш)
	
	лСписокНаименованийНужныхКнопок = СоздатьОбъект("СписокЗначений");
	лСписокНаименованийНужныхКнопок.ДобавитьЗначение(Врег("OK")); // eng
	лСписокНаименованийНужныхКнопок.ДобавитьЗначение(Врег("ОК")); // rus
	лСписокНаименованийНужныхКнопок.ДобавитьЗначение(Врег("Сформировать"));
	лСписокНаименованийНужныхКнопок.ДобавитьЗначение(Врег("Выполнить"));
	
	фПродолженияПоиска = ФормаРасш.НайтиАтрибут(1, 3);
	Пока фПродолженияПоиска = 1 Цикл
		лАтрибут = ФормаРасш.ТекущийАтрибут();
		лЗаголовок = Врег(СокрЛП(лАтрибут.Заголовок));
		лЗаголовок = СтрЗаменить(лЗаголовок, "&", "");
		
		Если лСписокНаименованийНужныхКнопок.НайтиЗначение(лЗаголовок) > 0 Тогда
			Возврат СокрЛП(лАтрибут.Формула);
		КонецЕсли;
        фПродолженияПоиска = ФормаРасш.ПолучитьСледующийАтрибут();
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ПолучитьВсеРеквизитыФормы(КонтекстФормы)

	ТабРеквизитов = СоздатьОбъект("ТаблицаЗначений");
	ТабРеквизитов.НоваяКолонка("Наименование", "Строка");
	ТабРеквизитов.НоваяКолонка("ТипЭлемента", "Строка");
	ТабРеквизитов.НоваяКолонка("Тип", "Строка");
	ТабРеквизитов.НоваяКолонка("Значение");
	ТабРеквизитов.НоваяКолонка("ТекущаяСтрока", "Число");
	
	ТабТиповФормы = СоздатьТаблицуСоответствияЭлементовФормы();
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы"); 
	ФормаРасш.УстановитьФорму(КонтекстФормы.Форма);
	СписокИд = СоздатьОбъект("СписокЗначений");
	
	НомерПредыдущегоПереключателя = 0;
	Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
		лАтрибут = ФормаРасш.ПолучитьАтрибут(Х);
		лПоз = 0;
		Если ТабТиповФормы.НайтиЗначение(лАтрибут.Тип, лПоз, "ИдентификаторТипа") = 0 Тогда
			Продолжить;
		КонецЕсли;        
		ТабТиповФормы.ПолучитьСтрокуПоНомеру(лПоз);
		лТипЭлемента = ТабТиповФормы.ТипЭлемента;
		// TODO для переключателей нужно использовать только первый элемент, но...
		//	- у FormEx-a нет соответствующего метода
		//	- у 'первого в группе' есть имя, но у непервых в группе тоже могут быть имена
		//  - подряд могут идти две группы переключателей
		// пока можно рекомендовать вставлять между группами переключателей минимум один 'не переключатель' 
		Если лТипЭлемента = "Переключатель" Тогда
			Если НомерПредыдущегоПереключателя = 0 Тогда
				// это первый в группе
				НомерПредыдущегоПереключателя = Х;
			Иначе
				Если НомерПредыдущегоПереключателя = Х - 1 Тогда
					// это очередной в групппе
					НомерПредыдущегоПереключателя = Х;
					Продолжить;
				Иначе
					// скачок в нумерации, скорее всего другая группа
					НомерПредыдущегоПереключателя = Х;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НомерПредыдущегоПереключателя = 0;
		КонецЕсли;
		
		ТабРеквизитов.НоваяСтрока();
		ТабРеквизитов.Наименование = лАтрибут.Идентификатор;
		ТабРеквизитов.ТипЭлемента = лТипЭлемента;
		ТабРеквизитов.Тип = ТипЗначенияСтр(лАтрибут.Значение);
		ТабРеквизитов.Значение = лАтрибут.Значение; // вообще говоря, не нужно
		ТабРеквизитов.ТекущаяСтрока = 0;
		Если (лТипЭлемента = "Таблица") или (лТипЭлемента = "Поле со списком") или (лТипЭлемента = "Список") Тогда
			ТабРеквизитов.ТекущаяСтрока = лАтрибут.Значение.ТекущаяСтрока();
		КонецЕсли;
	КонецЦикла;

	лФормулаЗапуска = НайтиПодходящуюФормулуЗапускаОтчета(ФормаРасш);
	Если лФормулаЗапуска <> "" Тогда
		ТабРеквизитов.НоваяСтрока();
		ТабРеквизитов.Наименование = Сам(Контекст).ВернутьНаименованиеУсловия_ФормулаЗапуска();
		ТабРеквизитов.ТипЭлемента = 3;
		ТабРеквизитов.Тип = "Строка";
		ТабРеквизитов.Значение = лФормулаЗапуска;
		ТабРеквизитов.ТекущаяСтрока = 0;
	КонецЕсли;
	
	ТабРеквизитов.Сортировать("Наименование");
	
	Возврат ТабРеквизитов;
КонецФункции	// ПолучитьВсеРеквизитыФормы

Функция ОткрытьФормуИПолучитьВсеРеквизиты(Тест) Экспорт

	Конт = Сам(Контекст).ОткрытьФормуОтчета(Тест, "");
    
	Если ТипЗначения(Конт) <> 100 Тогда
		Возврат СоздатьОбъект("ТаблицаЗначений");
	КонецЕсли;

	Таб = ПолучитьВсеРеквизитыФормы(Конт);

	Конт.Форма.Закрыть(0);
	Возврат Таб;	
КонецФункции	// ПолучитьВсеРеквизитыФормы
                                                   
// найти в списке по представлению
// возвращает 1 или 0, если не найдено
//
// типовое Список.Получить(Представление) почему-то не работает :(
//
Функция НайтиВСпискеПоПредставлению(Список, ИскомоеПредставление, лИскомоеЗначение)
	Для к=1 По Список.РазмерСписка() Цикл
		лПредставление = "";
		лЗначение = Список.ПолучитьЗначение(к, лПредставление);
		Если СокрЛП(лПредставление) = СокрЛП(ИскомоеПредставление) Тогда
			Список.УдалитьЗначение(к); // чтобы не искать лишний раз
			лИскомоеЗначение = лЗначение;
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции	// НайтиВСпискеПоПредставлению
                               
////////////////////////////////////////////
// открыть форму отчета и заполнить ее данными из переданного списка значения
// в списке представление - это идентификатор элемента на форме, значение - это значение для установки в этот элемент
//
// 	Пример использования в отчете
//		Процедура ПриОткрытии()
//			Если ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
//				лОбъект = СоздатьОбъект("Resulter_Report");
//				лОбъект.ЗаполнитьФормуНастройкамиТеста(Контекст, Форма.Параметр);
//				
//				// необходимые действия ...
//			КонецЕсли;
//		КонецПроцедуры
//
// возвращает 1 - удачно, 0 - неудачно
Функция ЗаполнитьФормуНастройкамиТеста(КонтекстОтчета, СписокЗначений) Экспорт // TODO rename ЗаполнитьФормуНастройкамиТеста

	Конт = КонтекстОтчета;
    
	Если ТипЗначения(Конт) <> 100 Тогда
		Возврат 0;
	КонецЕсли;
    Условия = СписокЗначений;
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы"); 
	ФормаРасш.УстановитьФорму(Конт.Форма);
	СписокИд = СоздатьОбъект("СписокЗначений"); 
	Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
		лАтрибут = ФормаРасш.ПолучитьАтрибут(Х);
		                                               
		Если СокрЛП(лАтрибут.Идентификатор) = "" Тогда
			Продолжить;
		КонецЕсли;

		// проверю, есть ли такой параметр у формы 
		лЗначениеУсловия = 0;
		Если НайтиВСпискеПоПредставлению(Условия, лАтрибут.Идентификатор, лЗначениеУсловия) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// проверю типы значений
		ТипЗначенияУсловия = ТипЗначенияСтр(лЗначениеУсловия);
		Если ТипЗначенияУсловия <> ТипЗначенияСтр(лАтрибут.Значение) Тогда
			// TODO все равно заменить ??? 
			Сообщить("Для условия теста "+лАтрибут.Идентификатор+" на форме тип значения "+лАтрибут.Идентификатор +" = "+ТипЗначенияСтр(лАтрибут.Значение)+", а в условии = "+ТипЗначенияУсловия, "!!");		
			Сообщить("  поэтому пропускаю!!","!!");
			Продолжить;
		КонецЕсли;

		Если (ТипЗначенияУсловия <> "СписокЗначений") и (ТипЗначенияУсловия <> "ТаблицаЗначений") Тогда
			лАтрибут.Значение = лЗначениеУсловия;
		Иначе
			лЗначениеУсловия.Выгрузить(лАтрибут.Значение);
			Если лЗначениеУсловия.ТекущаяСтрока() <> 0 Тогда
				лАтрибут.Значение.ТекущаяСтрока(лЗначениеУсловия.ТекущаяСтрока());
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
    
	Конт.Форма.Обновить(1); // чтобы увидеть результаты !

	Возврат 1;	
КонецФункции	// ЗаполнитьФормуНастройкамиТеста

////////////////////////////////////////////

Процедура ПроверитьСовпадениеРеквизитов(пРеквизитыИзФормы, пУсловияСписком)
	Перем ТаблицаСравнения;
	
	пРеквизитыИзФормы.Выгрузить(ТаблицаСравнения,,,"Наименование");
	
	ТаблицаСравнения.НоваяКолонка("Признак");
	ТаблицаСравнения.Заполнить(1,,,"Признак");
	
	Для Инд = 1 По пУсловияСписком.РазмерСписка() Цикл
		Предс = "";
		Значен = пУсловияСписком.ПолучитьЗначение(Инд, Предс);
		Если (Предс = "НазваниеТеста") ИЛИ (Предс = "ЧтоТестируем") ИЛИ (Предс = "Объект") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаСравнения.НоваяСтрока();
		ТаблицаСравнения.Наименование = Предс;
		ТаблицаСравнения.Признак = 2;
	КонецЦикла;
	
	ТаблицаСравнения.Свернуть("Наименование", "Признак");
	ТаблицаСравнения.Сортировать("Наименование");
	
	ТолькоНаФорме = "";
	ТолькоВУсловиях = "";

	ТаблицаСравнения.ВыбратьСтроки();
	Пока ТаблицаСравнения.ПолучитьСтроку() = 1 Цикл
		Если ТаблицаСравнения.Признак = 1 Тогда
			ТолькоНаФорме = ТолькоНаФорме + СимволТабуляции + ТаблицаСравнения.Наименование + РазделительСтрок;
		ИначеЕсли ТаблицаСравнения.Признак = 2 Тогда
			ТолькоВУсловиях = ТолькоВУсловиях + СимволТабуляции + ТаблицаСравнения.Наименование + РазделительСтрок;
		КонецЕсли;
	КонецЦикла;
	
	Если (ТолькоНаФорме > "") ИЛИ (ТолькоВУсловиях > "") Тогда
		ТекстПредупреждения = "Обнаружены несовпадающие реквизиты." + РазделительСтрок + РазделительСтрок;
		Если ТолькоНаФорме > "" Тогда
			ТекстПредупреждения = ТекстПредупреждения + "Есть только на форме:" + РазделительСтрок + ТолькоНаФорме + РазделительСтрок;
		КонецЕсли;
		Если ТолькоВУсловиях > "" Тогда
			ТекстПредупреждения = ТекстПредупреждения +  "Есть только в условиях:" + РазделительСтрок + ТолькоВУсловиях;
		КонецЕсли;
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры // ПроверитьСовпадениеРеквизитов

////////////////////////////////////////////
// возвращает 1 - удачно, 0 - неудачно
Функция ОткрытьФормуСУсловиямиТеста(пТест) Экспорт
	Конт = Сам(Контекст).ОткрытьФормуОтчета(пТест, "");
    
	Если ТипЗначения(Конт) <> 100 Тогда
		Возврат 0;
	КонецЕсли;

	Условия = пТест.ПолучитьУсловияКакСписокЗначений();
	
	ПроверитьСовпадениеРеквизитов(ПолучитьВсеРеквизитыФормы(Конт), Условия);

	// TODO избавиться от условий, специфичных только для теста и не важных для отчета (а может и не надо)
	Возврат Сам(Контекст).ЗаполнитьФормуНастройкамиТеста(Конт, Условия);
КонецФункции	// ОткрытьФормуСУсловиямиТеста

////////////////////////////////////////////
// Общий метод классов Resulter_Report и Resulter_ReportMXL
Функция ПолучитьРезультатТестированияОтчета(Тест) Экспорт
	Возврат Сам(Контекст).ОткрытьФормуОтчета(Тест, Тест.ПолучитьУсловияКакСписокЗначений());
КонецФункции

Функция Выполнить(Тест) Экспорт
	
	Результат=СоздатьОбъект("ТаблицаЗначений");
	

	КонтекстФормы = Сам(Контекст).ПолучитьРезультатТестированияОтчета(Тест);
	лНаименованиеОбработки = Тест.ПолучитьИмяОтчета();                              

	Попытка
		КодОшибки=КонтекстФормы.КодОшибки;
		Результат=КонтекстФормы.ПолученныйРезультат;
	Исключение  
		// возврат в параметре формы
		Попытка // если в ПриОткрытии отчета стоит Форма.Закрыть()
			лРезультатТеста = КонтекстФормы.Форма.Параметр;
		Исключение
			лРезультатТеста = КонтекстФормы;  // если в ПриОткрытии отчета стоит СтатусВозврата(0), параметр можно вернуть только списком или таблицей
		КонецПопытки;
		
		Попытка                   
			Если ТипЗначенияСтр(лРезультатТеста) <> "СписокЗначений" Тогда
				Сообщить("Форма "+лНаименованиеОбработки+" не подготовлена для автоматического тестирования.", "!");
				Возврат 0;
			КонецЕсли;
			КодОшибки = лРезультатТеста.Получить("КодОшибки");
			Результат = лРезультатТеста.Получить("ПолученныйРезультат");
		Исключение
			Сообщить("Форма "+лНаименованиеОбработки+" не подготовлена для автоматического тестирования.", "!");
			Сообщить("Отсутствует реквизит формы ""КодОшибки"" или ""ПолученныйРезультат"".", "!");
			Возврат 0;
		КонецПопытки;
	КонецПопытки;
	Если КодОшибки<>0 Тогда
		Сообщить("Во время тестирования "+лНаименованиеОбработки+" произошла внутренняя ошибка с кодом "+КодОшибки, "!");
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
