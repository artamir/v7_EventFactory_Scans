Перем ИмяМетода Экспорт; 

Функция ТотЖе(Значение) Возврат Значение; КонецФункции
Функция Сам() Возврат ТотЖе(Контекст); КонецФункции

Процедура Сетап() Экспорт
	// virtual method
КонецПроцедуры

Процедура Сброс() Экспорт
	// virtual method
КонецПроцедуры

Функция Описание() Экспорт
	Возврат ТипЗначенияСтр(Сам())+"::"+ИмяМетода;
КонецФункции
//--------------------------------------------

Процедура Запустить(Результат) Экспорт 
	Сам().Сетап();
	
	Длг = СоздатьОбъект("Делегат");
	Длг.ОпределитьТип(0, 0);

	Состояние(Описание());	
	Попытка
		Длг.Добавить(Сам(), ИмяМетода);
		Длг.Вызвать();
		Результат.ДобавитьУспех();
	Исключение
		Ошибка=ОписаниеОшибки();
		Результат.ДобавитьПадение(Описание(), Ошибка, Сам().ПолучитьИсключение());
	КонецПопытки;
	
	Сам().Сброс();
	Состояние("");
КонецПроцедуры

Процедура Инит(Параметр) Экспорт
	ИмяМетода = Параметр; 
КонецПроцедуры

Процедура Assert(Значение) Экспорт
	Если ПустоеЗначение(Значение)=1 Тогда
		Сам()._ВыброситьИскл(""+Значение+" - ложно, а хотели истину.");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИстину(Значение) Экспорт
	Assert(Значение);
КонецПроцедуры

Процедура AssertNot(Значение) Экспорт
	Если ПустоеЗначение(Значение)=0 Тогда
		Сам()._ВыброситьИскл(""+Значение+" - истинно, а хотели ложь");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЛожь(Значение) Экспорт
	AssertNot(Значение);
КонецПроцедуры

Процедура AssertEquals(Значение1, Значение2) Экспорт
	Если Значение1 <> Значение2 Тогда
		Сам()._ВыброситьИскл(""+Значение1+" не равно "+Значение2+", а хотели, чтоб было равно.");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРавенство(Значение1, Значение2) Экспорт
	AssertEquals(Значение1, Значение2);
КонецПроцедуры

Процедура AssertNotEquals(Значение1, Значение2) Экспорт
	Если Значение1 = Значение2 Тогда
		Сам()._ВыброситьИскл(""+Значение1+" равно "+Значение2+", а хотели, чтоб было не равно.");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНеравенство(Значение1, Значение2) Экспорт
	AssertNotEquals(Значение1, Значение2);
КонецПроцедуры

Процедура AssertFail(Объект, Метод, Параметр, ПроцФунк) Экспорт
	Длг = СоздатьОбъект("Делегат");
	Длг.ОпределитьТип(1, ПроцФунк);
	Длг.Добавить(Объект, Метод);
	
	Упал=0;
	Попытка
		Длг.Вызвать(Параметр);
	Исключение
		Упал=1;
	КонецПопытки;
	
	Если Упал=0 Тогда
		Сам()._ВыброситьИскл("Хотели исключения, а его не было.");
	КонецЕсли;
	
КонецПроцедуры
Процедура ПроверитьИсключение(Объект, Метод, Параметр, ПроцФунк) Экспорт
	AssertFail(Объект, Метод, Параметр, ПроцФунк);
КонецПроцедуры

Процедура AssertFailProc(Объект, Метод, Параметр) Экспорт
	AssertFail(Объект, Метод, Параметр, 0);
КонецПроцедуры
Процедура AssertFailFunc(Объект, Метод, Параметр) Экспорт
	AssertFail(Объект, Метод, Параметр, 1);
КонецПроцедуры

Процедура ПроверитьИсключениеПроц(Объект, Метод, Параметр) Экспорт
	AssertFailProc(Объект, Метод, Параметр);
КонецПроцедуры
Процедура ПроверитьИсключениеФунк(Объект, Метод, Параметр) Экспорт
	AssertFailFunc(Объект, Метод, Параметр);
КонецПроцедуры

Функция _ПолучитьКод() Экспорт
	Предупреждение("Вызвана _ПолучитьКод");
	Возврат Описание();
КонецФункции

Процедура ПроверитьБольше(Значение1, Значение2) Экспорт
	Если Значение1 <= Значение2 Тогда
		Сам()._ВыброситьИскл(""+Значение1+" меньше или равно "+Значение2+", а хотели, чтоб было больше.");
	КонецЕсли;
КонецПроцедуры
Процедура ПроверитьБольшеИлиРавно(Значение1, Значение2) Экспорт
	Если Значение1 < Значение2 Тогда
		Сам()._ВыброситьИскл(""+Значение1+" меньше "+Значение2+", а хотели, чтоб было больше или равно.");
	КонецЕсли;
КонецПроцедуры