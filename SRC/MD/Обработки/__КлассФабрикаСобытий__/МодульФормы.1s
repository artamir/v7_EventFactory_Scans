//*******************************************************
//*********************  ОПИСАНИЕ  **********************
//*******************************************************

//
// Класс 1С++ (Внешний отчет/обработка для 1С:Предприятие 7.7)
//
// Подсистема "Фабрика событий" v 1.0
// 
// Ловит и рассылает события глобального модуля и форм 1С
// другим классам-подписчикам 1С++, используя механизм 
// класса "МенеджерСобытий" компоненты 1С++.
// Позволяет объединять в одной конфигурации и параллельно 
// работать нескольким подсистемам (классам) использующим 
// перехват событий глобального модуля и форм.
//
// Делалась для объединения и совместной работы двух подсистем 
// "Доп. права доков" v 2.0 и "Сканы доков" v 2.0, т.е. после
// установки "Фабрики событий", предполагается, что будут
// установлены и эти подсистемы, или одна из них, т.к.
// сама по себе "Фабрика событий", без подписчиков, на рассылаемые
// ею события, особого смысла не имеет.
// Найти их можно на сайте: http://venger.narod.ru
// Или в моем профиле тут: http://infostart.ru/profile/20743/
//
// Автор: Венгер Александр, Одесса, 2010 [http://venger.narod.ru]
// 
// Используются внешние компоненты:
//   1С++ [http://www.1cpp.ru] и 
//   FormEx [http://www.dorex.ru]
// Скачать свежие версии 1cpp.dll и formex.dll можно тут:
//    1cpp.dll:  http://www.1cpp.ru/images/3/32/Icpp-latest.rar
//    formex.dll:  http://www.dorex.ru/files/?formex_t.zip
// Кидаем их в каталог с базой, либо в папку \Bin основной 
// программы и в глобальном модуле в процедуре 
// "ПриНачалеРаботыСистемы()" пишем две строчки:
//	  ЗагрузитьВнешнююКомпоненту("1cpp.dll"); 
//	  ЗагрузитьВнешнююКомпоненту("formex.dll"); 
//
// Подключается вставкой таких строк в глобальный модуль в 
// процедуру "ПриНачалеРаботыСистемы()", после кода загрузки
// внешних компонент:
// 	__Settings1cpp__=СоздатьОбъект("SettingsManager");
// 	__Settings1cpp__.Set("EnableHookEventsGroupContext",1);
// 	__Перехватчик__=СоздатьОбъект("Перехватчик"); 	
// 	__Перехватчик__.СнятьПерехватСобытийГлобальногоМодуля();
//	__КлассФабрикаСобытий__=СоздатьОбъект("__КлассФабрикаСобытий__");
//	__Перехватчик__.ПерехватитьСобытияГлобальногоМодуля(__КлассФабрикаСобытий__);
// 
// Предполагается наличие в конфигурации (есть в предлагаемой md'шке):
//   а) объявления этого класса в обработке "defcls":
//		//# класс __КлассФабрикаСобытий__ = __КлассФабрикаСобытий__@MD
//		//# {};
//   б) Определения этого класса в обработке "__КлассФабрикаСобытий__",
//      т.е. фактически наличие кода этого класса в конфе в обработке с
//      именем "__КлассФабрикаСобытий__"
//
// Заметки:  Важен порядок подключения подсистем в коде глобального модуля 
//           в процедуре "ПриНачалеРаботыСистемы()", т.е. сначала код подключения
//           "Фабрики событий", потом "Доп. прав доков", потом "Сканов доков",
//           так будет оптимальнее всего:
//
//				// Загрузка внешних компонент
//				Если ЗагрузитьВнешнююКомпоненту("1cpp.dll")<=0 Тогда
//					Предупреждение("Не загружена внешняя компонента 1С++",10);
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				Если ЗагрузитьВнешнююКомпоненту("formex.dll")<=0 Тогда
//					Предупреждение("Не загружена внешняя компонента FormEx",10);
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				
//				// Подключение подсистемы "Фабрика событий"
//				__Settings1cpp__=СоздатьОбъект("SettingsManager");
//				__Settings1cpp__.Set("EnableHookEventsGroupContext",1);
//				__Перехватчик__=СоздатьОбъект("Перехватчик"); 	
//				__Перехватчик__.СнятьПерехватСобытийГлобальногоМодуля();
//			    __КлассФабрикаСобытий__=СоздатьОбъект("__КлассФабрикаСобытий__");
//				__Перехватчик__.ПерехватитьСобытияГлобальногоМодуля(__КлассФабрикаСобытий__);
//				
//				// Подключение подсистемы "Доп. права для доков"
//				__КлассПодсистемыДопПраваДоков__=СоздатьОбъект("__КлассПодсистемыДопПраваДоков__");
//				__КлассПодсистемыДопПраваДоков__.ПодписатьКлассНаСобытияФабрики(__КлассФабрикаСобытий__);	
//			
//				// Подключение подсистемы "Сканы доков"
//				__КлассПодсистемыСканыДоков__=СоздатьОбъект("__КлассПодсистемыСканыДоков__");
//				__КлассПодсистемыСканыДоков__.ДобавитьДопГлобМодуль();
//				__КлассПодсистемыСканыДоков__.ПодписатьКлассНаСобытияФабрики(__КлассФабрикаСобытий__);
//
//

Перем СписокКлассовПодписчиков Экспорт;

Перем КлючКласса Экспорт;

Перем КонтекстФормы Экспорт;
Перем Информатор, ВыполняемыйМодуль;
Перем ПодписчикиСобытий;
Перем УправлениеНастройками;
Перем Перехватчик;

//@# (Добавлен)(MA)@TOC, 2020-12-17 12:43:57 [ФабрикаСобытий v2]
Перем ТаблицаПодписчикиСобытий;
Перем ИндексСобытияПодписчики;
Перем ИндексСобытия;
Перем ИндексПодписчики;
Перем ИндексПодписчикиУникальный;
//@# (Конец)(MA)@TOC, 2020-12-17 12:43:57 [ФабрикаСобытий v2]


Перем ТОК_Отладка Экспорт; //+(MA)@TOC, 2020.12.06 [Фабрика событий]


//{ Внешний интерфейс

// Метод включает перехват событий контекста переданной формы
Процедура ВключитьПерехватСобытийГК(Конт = "") Экспорт Далее

// Метод подписывает переданный контекст обработчика на события фабрики
Процедура  ПодписатьОбъектНаФабрику(КонтекстОбработчика) Экспорт Далее

//}

//======================================================================
Процедура ТОК_ОтладкаИнициализация() Экспорт
	ТОК_Отладка = СоздатьОбъект("ТОК.Отладка");
	ТОК_Отладка.РежимОтладки = 1;
	ТОК_Отладка.Предупреждать = 0;
КонецПроцедуры // ТОК_ОтладкаИнициализация

//======================================================================
Процедура Конструктор()
	
	ТОК_ОтладкаИнициализация();
	ТОК_Отладка.Соо("Конструктор()");
	
	ПодписчикиСобытий = СоздатьОбъект("АссоциативныйВектор");
	Информатор = СоздатьОбъект("Информатор");
	ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	
	СписокКлассовПодписчиков=СоздатьОбъект("СписокЗначений");
	

	//@# (Добавлен)(MA)@TOC, 2020-12-17 12:20:50 [ФабрикаСобытий v2]
	ТаблицаПодписчикиСобытий = СоздатьОбъект("ИндексированнаяТаблица");
	ТаблицаПодписчикиСобытий.НоваяКолонка("ИдСобытия");
	ТаблицаПодписчикиСобытий.НоваяКолонка("ИдПодписчика");
	ТаблицаПодписчикиСобытий.НоваяКолонка("ВыполняемыйМетод");
	ТаблицаПодписчикиСобытий.НоваяКолонка("КонтекстПодписчика");
	ТаблицаПодписчикиСобытий.НоваяКолонка("ПодписанНаСобытияГК");
	
	ИндексСобытияПодписчики = "СобытияПодписчики";
	ТаблицаПодписчикиСобытий.ДобавитьИндекс(ИндексСобытияПодписчики, "ИдСобытия,ИдПодписчика");
	
	ИндексСобытия = "События";
	ТаблицаПодписчикиСобытий.ДобавитьИндекс(ИндексСобытия, "ИдСобытия");
	
	ИндексПодписчики = "Подписчики";
	ТаблицаПодписчикиСобытий.ДобавитьИндекс(ИндексПодписчики, "ИдПодписчика");
	
	ИндексПодписчикиУникальный = "ПодписчикиУникальный";
	ТаблицаПодписчикиСобытий.ДобавитьИндекс(ИндексПодписчикиУникальный, "ИдПодписчика", 1);
	//@# (Конец)(MA)@TOC, 2020-12-17 12:20:50 [ФабрикаСобытий v2]


КонецПроцедуры	// Конструктор

//======================================================================
Процедура Деструктор()
	ТОК_Отладка.Соо("Деструктор()");
КонецПроцедуры // Деструктор

//======================================================================
Процедура ВключитьПерехватСобытийГК(Конт = "") Экспорт
	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
		КонтФормы = Конт;
		КонтекстФормы = Конт; //+(MA)@TOC, 2020-12-01 17:13:31 [ТОК_УправлениеФормой]
	КонецЕсли;
	Перехватчик = СоздатьОбъект("Перехватчик");

	//*(MA)@TOC, 2020-12-01 17:15:31 [ТОК_УправлениеФормой]
	//	Перехватчик.ПерехватитьСобытияГК(КонтФормы,Контекст);
	Перехватчик.СнятьПерехватСобытийГK(КонтекстФормы);
	Перехватчик.ПерехватитьСобытияГК(КонтекстФормы,я());
	///(MA)@TOC, 2020-12-01 17:15:31 [ТОК_УправлениеФормой]

КонецПроцедуры  // ВключитьПерехватСобытийГК

//{ Управление подпиской на события 
Процедура УстановитьФлагПодписанНаСобытияГК(ИдПодписчика) 
	ТаблицаПодписчикиСобытий.УстановитьФильтр(ИдПодписчика, ИдПодписчика, ИндексПодписчики);
	ТаблицаПодписчикиСобытий.ВыбратьСтроки(ИндексПодписчики);
	Пока ТаблицаПодписчикиСобытий.ПолучитьСтроку(ИндексПодписчики) = 1 Цикл
		ТаблицаПодписчикиСобытий.ПодписанНаСобытияГК = 1;
	КонецЦикла;
	ТаблицаПодписчикиСобытий.ВыключитьФильтр(ИндексПодписчики);
КонецПроцедуры	

//======================================================================
Процедура СнятьФлагиПодписанНаСобытияГК()
	ТаблицаПодписчикиСобытий.ВыбратьСтроки();
	Пока ТаблицаПодписчикиСобытий.ПолучитьСтроку() = 1 Цикл
		ТаблицаПодписчикиСобытий.ПодписанНаСобытияГК = 0;
	КонецЦикла;
КонецПроцедуры // СнятьФлагиПодписанНаСобытияГК

Процедура ДобавитьПодписчикаСобытия(КонтекстОбработчика,ИДПодписчика,ИДСобытия,ВыполняемыйМетод="") Экспорт
	
	фн = "ДобавитьПодписчикаСобытия";
	ИДПодписчика = СтрЗаменить(ИДПодписчика,".","_");
	ИДПодписчика = СокрЛП(ИДПодписчика);
	
	ТОК_Отладка.о(фн+"(КонтОбработчика,"+ИДПодписчика+","+ИДСобытия+","+ВыполняемыйМетод+")");
	
	сзФильтр = СоздатьОбъект("СписокЗначений");
	сзФильтр.Установить("ИдСобытия", 	ИДСобытия);
	сзФильтр.Установить("ИдПодписчика", ИДПодписчика);
	
	НомерНайденойСтроки = ТаблицаПодписчикиСобытий.НайтиСтроку(ИндексСобытияПодписчики, сзФильтр);
	
	Если НомерНайденойСтроки = 0 Тогда
		ТаблицаПодписчикиСобытий.НоваяСтрока();
		ТаблицаПодписчикиСобытий.ИдСобытия = ИДСобытия;
		ТаблицаПодписчикиСобытий.ИдПодписчика = ИДПодписчика;
		ТаблицаПодписчикиСобытий.ВыполняемыйМетод = ВыполняемыйМетод;
		ТаблицаПодписчикиСобытий.КонтекстПодписчика = КонтекстОбработчика;
	КонецЕсли;
	
	ТОК_Отладка.з(фн);
КонецПроцедуры // ДобавитьПодписчикаСобытий

Процедура УдалитьПодписчикаСобытия(ИДПодписчика) Экспорт
	ТаблицаПодписчикиСобытий.УстановитьФильтр(ИДПодписчика, ИДПодписчика, ИндексПодписчики);
	ТаблицаПодписчикиСобытий.УдалитьСтроки(ИндексПодписчики);
	ТаблицаПодписчикиСобытий.ВыключитьФильтр(ИндексПодписчики);	
КонецПроцедуры	

Функция ВыполнитьМетодКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры)
	фн = "ВыполнитьМетодКонтекста";
	ТОК_Отладка.о(фн);
	
	ТОК_Отладка.Соо("КонтекстФормы :: " + КонтекстФормы, 1);
	Рез = 1;
	Информатор = СоздатьОбъект("Информатор");
	Если Информатор.СвойствоСуществует(КонтекстПодписчика, "КонтекстФормы") = 1 Тогда
		ВыполняемыйМодуль.НазначитьКонтекст(КонтекстПодписчика);
		ВыполняемыйМодуль.УстановитьМодуль("
		|Процедура _КлассФабрикаСобытий_УстановитьФорму(пКонтекстФормы)
		|	КонтекстФормы = пКонтекстФормы;
		|КонецПроцедуры");
		ВыполняемыйМодуль.КомпилироватьМодуль();
		ВыполняемыйМодуль.ВыполнитьМодуль();
		ВыполняемыйМодуль._КлассФабрикаСобытий_УстановитьФорму(КонтекстФормы);
	КонецЕсли;	
	
	МетодСуществует = Информатор.МетодСуществует(КонтекстПодписчика, ВыполняемыйМетод);
	Если МетодСуществует <> 1 Тогда
		ТОК_Отладка.з(фн + "::::: 3");
		Возврат Рез;
	КонецЕсли;	
	
	ЭтоФункция = Информатор.ЯвляетсяФункцией(КонтекстПодписчика, ВыполняемыйМетод);
	
	
	Если ЭтоФункция = 1 Тогда
		ВыполняемыйМодуль.ВыполнитьФункциюКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры, Рез);
	Иначе
		ВыполняемыйМодуль.ВыполнитьПроцедуруКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры);	
		ТОК_Отладка.Соо("		МетодСуществует :: "+ВыполняемыйМетод+" :: "+Информатор.МетодСуществует(КонтекстПодписчика, ВыполняемыйМетод));	
	КонецЕсли;;
	
	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции // ВыполнитьМетодКонтекста

Функция  СообщитьПодписчикамОсновная(ИДСобытия,Параметры = "") Экспорт
	Рез = 1;
	фн = "СообщитьПодписчикамОсновная :: "+ИДСобытия;
	
	ТаблицаПодписчикиСобытий.УстановитьФильтр(ИДСобытия, ИДСобытия, ИндексСобытия);
	КоличествоПодписчиков = ТаблицаПодписчикиСобытий.КоличествоСтрок(ИндексСобытия);
	
	Если КоличествоПодписчиков = 0 Тогда
		ТаблицаПодписчикиСобытий.ВыключитьФильтр(ИндексСобытия);
		Возврат Рез;
	КонецЕсли;
	
	ТОК_Отладка.о(фн);
	Если ПустоеЗначение(Параметры) = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	ТаблицаПодписчикиСобытий.ВыбратьСтроки(ИндексСобытия);
	Пока ТаблицаПодписчикиСобытий.ПолучитьСтроку(ИндексСобытия) = 1 Цикл
		
		КонтекстПодписчика = ТаблицаПодписчикиСобытий.КонтекстПодписчика;
		ВыполняемыйМетод = ТаблицаПодписчикиСобытий.ВыполняемыйМетод;
		Рез = ВыполнитьМетодКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры);
		
	КонецЦикла;
	
	ТаблицаПодписчикиСобытий.ВыключитьФильтр(ИндексСобытия);
	ТОК_Отладка.з(фн);
	Возврат Рез;
	
КонецФункции

Функция  СообщитьПодписчикам(ИДСобытия,Параметры = "") Экспорт
	Рез = 1;
	фн = "СообщитьПодписчикам :: "+ИДСобытия;
	
	Рез = СообщитьПодписчикамОсновная(ИДСобытия, Параметры);
	Рез = ?(Рез = 0, Рез, СообщитьПодписчикамОсновная("Событие_"	+ИДСобытия, Параметры));
	Рез = ?(Рез = 0, Рез, СообщитьПодписчикамОсновная("СобытиеГМ_"	+ИДСобытия, Параметры));
	
	Возврат Рез;
КонецФункции
//}

Функция Событие_ОбработкаПроведения(КонтекстОбъекта,Параметры) Экспорт
	Рез = 1;
	фн = "Событие_ОбработкаПроведения";
	ТОК_Отладка.о(фн);
	
	ВыполнитьОригинальноеСобытие = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстОбъекта", КонтекстОбъекта);
	СЗПараметры.Установить("Параметры", Параметры);
	
	//====================================================================================================
	ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ОбработкаПроведенияДо");
	Рез = СообщитьПодписчикам("ОбработкаПроведенияДо",СЗПараметры);
	ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ТипЗначенияСтр(Рез)::"+ТипЗначенияСтр(Рез));
	Если ТипЗначенияСтр(Рез) = "СписокЗначений" Тогда
		ВыполнитьОригинальноеСобытие = Рез.Получить("ВыполнитьОригинальноеСобытие");
		Рез = Рез.Получить("Результат");
	КонецЕсли;	
	
	Если Рез = 1 Тогда
		ВыполнитьОригинальноеСобытие = СЗПараметры.Получить("ВыполнитьОригинальноеСобытие");
		ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ВыполнитьОригинальноеСобытие::"+ВыполнитьОригинальноеСобытие);
		Если ВыполнитьОригинальноеСобытие = 1 Тогда
	
			Перехватчик = СоздатьОбъект("Перехватчик");
			рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстОбъекта,"ОбработкаПроведения",Параметры);
		КонецЕсли;	
	КонецЕсли;
	
	//=====================================================================================================
	Рез = СообщитьПодписчикам("ОбработкаПроведенияПосле",СЗПараметры);
	
	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции	

//{ предопределенные события гм 1С

Функция СобытиеГМ_ПриОткрытии(пКонтекстФормы, ФлагЧтенияНастройки) Экспорт
	Рез = 1;
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(пКонтекстФормы.Форма);
	фн = "СобытиеГМ_ПриОткрытии." + РасширениеФормы.ПолныйТипОбъекта();
	ТОК_Отладка.о(фн);
	
	КонтекстФормы = пКонтекстФормы;
	
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстФормы", КонтекстФормы);
	СЗПараметры.Установить("ФлагЧтенияНастройки", ФлагЧтенияНастройки);
	
	//----------------------------------------------------------------------
	т1 = "Создание перехватчика ГК и создание копий подписчиков";
	ТОК_Отладка.о(т1);
	
	ВекторМетодовПриОткрытии = СоздатьОбъект("Вектор");
	ВекторМетодовПриОткрытии.Добавить("ПриОткрытии");
	ВекторМетодовПриОткрытии.Добавить("СобытиеГМ_ПриОткрытии");
	
	Перехватчик = СоздатьОбъект("Перехватчик");
	ПерехватчикГК = СоздатьОбъект(ТипЗначенияСтр(я()));
	ПерехватчикГК.КонтекстФормы = КонтекстФормы;
	
	т2 = "Выполнение подписчиков ПриОткрытии";
	ТОК_Отладка.о(т2);
	
	Для ТекущийИндекс = 0 По ВекторМетодовПриОткрытии.Количество()-1 Цикл
	
		ТекМетодПриОктрытии = ВекторМетодовПриОткрытии.Получить(ТекущийИндекс);
		
		ТаблицаПодписчикиСобытий.УстановитьФильтр(ТекМетодПриОктрытии, ТекМетодПриОктрытии, ИндексСобытия);
		ТаблицаПодписчикиСобытий.ВыбратьСтроки(ИндексСобытия);
		Пока ТаблицаПодписчикиСобытий.ПолучитьСтроку(ИндексСобытия) = 1 Цикл
			
			ТекущийКонтекстПерехватаГК = Перехватчик.ПолучитьПерехватчикСобытийГК(КонтекстФормы);
			ТОК_Отладка.Соо(фн + " -------------------------------------- :: ТекущийКонтекстПерехватаГК" + ТекущийКонтекстПерехватаГК);
			
			КонтекстПодписчика = ТаблицаПодписчикиСобытий.КонтекстПодписчика;
			ИдПодписчика = ТаблицаПодписчикиСобытий.ИдПодписчика;
			
			ВыполнитьМетодКонтекста(КонтекстПодписчика, ТекМетодПриОктрытии, СЗПараметры);
			
			НовыйКонтекстПерехватаГК = Перехватчик.ПолучитьПерехватчикСобытийГК(КонтекстФормы);
			ТОК_Отладка.Соо(фн + " -------------------------------------- :: НовыйКонтекстПерехватаГК" + НовыйКонтекстПерехватаГК);
			
			ИзменилсяКонтекстПерехватаГК = ?(НовыйКонтекстПерехватаГК = ТекущийКонтекстПерехватаГК, 0, 1);
			ТОК_Отладка.Соо(фн + " -------------------------------------- :: ИзменилсяКонтекстПерехватаГК" + ИзменилсяКонтекстПерехватаГК);
			
			Если ИзменилсяКонтекстПерехватаГК = 1 Тогда
				ТекущийКонтекстПерехватаГК = НовыйКонтекстПерехватаГК;
				ПерехватчикГК.ПодписатьОбъектНаФабрику(НовыйКонтекстПерехватаГК);
				КонтекстПодписанНаНовыйПерехватчик = 1;
				
				УстановитьФлагПодписанНаСобытияГК(ИдПодписчика);
				
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		ТаблицаПодписчикиСобытий.ВыключитьФильтр(ИндексСобытия);
	
	КонецЦикла;	
	
	ТОК_Отладка.з(т2);
	
	т3 = "Копирование остальных подписчиков";
	ТОК_Отладка.о(т3);
	
	ТаблицаПодписчикиСобытий.ВыбратьСтроки(ИндексПодписчикиУникальный);
	Пока ТаблицаПодписчикиСобытий.ПолучитьСтроку(ИндексПодписчикиУникальный) = 1 Цикл
		
		ПодписанНаСобытияГК = ТаблицаПодписчикиСобытий.ПодписанНаСобытияГК;
		
		Если ПодписанНаСобытияГК = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдПодписчика = ТаблицаПодписчикиСобытий.ИдПодписчика;
		КонтекстПодписчика = ТаблицаПодписчикиСобытий.КонтекстПодписчика;
		
		НовыйКонтекстПодписчика = СоздатьОбъект(ТипЗначенияСтр(КонтекстПодписчика));
		ПерехватчикГК.ПодписатьОбъектНаФабрику(НовыйКонтекстПодписчика);
		
		УстановитьФлагПодписанНаСобытияГК(ИдПодписчика);
	КонецЦикла;
	
	ТОК_Отладка.з(т3);
	
	СнятьФлагиПодписанНаСобытияГК();
		
	ПерехватчикГК.ВключитьПерехватСобытийГК(КонтекстФормы);
//	Рез = ПерехватчикГК.СообщитьПодписчикам("ПриОткрытии",СЗПараметры); //-(MA)@TOC, 2020.12.11 [Фабрика событий]
	
	ТОК_Отладка.з(т1);

	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции

Функция  СобытиеГМ_ПослеСозданияФормы(пКонтекстФормы) Экспорт
	фн = "СобытиеГМ_ПослеСозданияФормы";
	ТОК_Отладка.о(фн);
	
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстФормы", пКонтекстФормы);
	
	Рез = СообщитьПодписчикам("ГМ_ПослеСозданияФормы", СЗПараметры);
	//Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПослеСозданияФормы", пКонтекстФормы); //Почему-то ругается
	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции

Функция СобытиеГМ_ПриУдаленииДокумента(Док,Режим) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СЗПараметры.Установить("Режим", Режим);
	СообщитьПодписчикам("ПриУдаленииДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриУдаленииДокумента",Док,Режим);
	
	Возврат Рез;
КонецФункции

Функция СобытиеГМ_ПриИзмененииВремениДокумента(Док) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СообщитьПодписчикам("ПриИзмененииВремениДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриИзмененииВремениДокумента",Док);
	
	Возврат Рез;
КонецФункции	

Функция СобытиеГМ_ПриОтменеПроведенияДокумента(Док) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СообщитьПодписчикам("ПриОтменеПроведенияДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриОтменеПроведенияДокумента",Док);
	
	Возврат Рез;
КонецФункции	
	
//}

//{ предопределенные события формы 1С

Процедура Событие_ПриПовторномОткрытии() Экспорт
	СообщитьПодписчикам("ПриПовторномОткрытии");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриПовторномОткрытии");
КонецПроцедуры

Процедура Событие_ПриЗакрытии() Экспорт
	СообщитьПодписчикам("ПриЗакрытии");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриЗакрытии");
КонецПроцедуры

Функция Событие_ПриВыбореЗакладки(НомерЗакладки,ЗначениеЗакладки) Экспорт
	фн = "Событие_ПриВыбореЗакладки";
	ТОК_Отладка.о(фн);
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("НомерЗакладки",НомерЗакладки);
	СЗПараметры.Установить("ЗначениеЗакладки",ЗначениеЗакладки);
	Рез = СообщитьПодписчикам("ПриВыбореЗакладки",СЗПараметры);
	
	Если Рез = 0 Тогда
		ТОК_Отладка.з(фн);
		Возврат Рез;
	КонецЕсли;
	
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореЗакладки",НомерЗакладки,ЗначениеЗакладки);
	
	Рез = СообщитьПодписчикам("ПриВыбореЗакладкиПосле", СЗПараметры);
	
	ТОК_Отладка.з();
	Возврат Рез;
КонецФункции

Процедура Событие_ОбработкаПодбора(Элемент,КонтекстФормыПодбора) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Элемент",Элемент);
	СЗПараметры.Установить("КонтекстФормыПодбора",КонтекстФормыПодбора);
	СообщитьПодписчикам("ОбработкаПодбора",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ОбработкаПодбора",Элемент,КонтекстФормыПодбора);
КонецПроцедуры

Процедура Событие_ПриНачалеВыбораЗначения(ИДАтрибута,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ИДАтрибута",ИДАтрибута);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНачалеВыбораЗначения",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНачалеВыбораЗначения",ИДАтрибута,ФСО);
КонецПроцедуры

Процедура Событие_ОбработкаВыбораЗначения(ВыбЗнач,ИДАтрибута,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ВыбЗнач",ВыбЗнач);
	СЗПараметры.Установить("ИДАтрибута",ИДАтрибута);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ОбработкаВыбораЗначения",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ОбработкаВыбораЗначения",ВыбЗнач,ИДАтрибута,ФСО);
КонецПроцедуры

Процедура Событие_ПриВыбореСтроки() Экспорт
	СообщитьПодписчикам("ПриВыбореСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореСтроки");
КонецПроцедуры

Процедура Событие_ВводНового() Экспорт
	СообщитьПодписчикам("ВводНового");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ВводНового");
КонецПроцедуры

Процедура Событие_ПриВыбореЯчейкиТаблицы(Адрес,Значение) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Адрес",Адрес);
	СЗПараметры.Установить("Значение",Значение);
	СообщитьПодписчикам("ПриВыбореЯчейкиТаблицы",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореЯчейкиТаблицы",Адрес,Значение);
КонецПроцедуры

Процедура Событие_ПриЗаписи() Экспорт
	СообщитьПодписчикам("ПриЗаписи");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриЗаписи");
КонецПроцедуры

Процедура Событие_ВводНаОсновании(ДокОснование) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ДокОснование",ДокОснование);
	СообщитьПодписчикам("ВводНаОсновании",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ВводНаОсновании",ДокОснование);
КонецПроцедуры

Процедура Событие_ПриВводеСтроки() Экспорт
	СообщитьПодписчикам("ПриВводеСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВводеСтроки");
КонецПроцедуры

Процедура Событие_ПриРедактированииНовойСтроки() Экспорт
	СообщитьПодписчикам("ПриРедактированииНовойСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриРедактированииНовойСтроки");
КонецПроцедуры

Процедура Событие_ПриНачалеРедактированияСтроки() Экспорт
	СообщитьПодписчикам("ПриНачалеРедактированияСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНачалеРедактированияСтроки");
КонецПроцедуры

Процедура Событие_ПриОкончанииРедактированияСтроки(ФлагНовойСтроки) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ФлагНовойСтроки",ФлагНовойСтроки);
	СообщитьПодписчикам("ПриОкончанииРедактированияСтроки",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОкончанииРедактированияСтроки",ФлагНовойСтроки);
КонецПроцедуры

Процедура Событие_ПриИзмененииПорядкаСтрок(Действие) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Действие",Действие);
	СообщитьПодписчикам("ПриИзмененииПорядкаСтрок",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриИзмененииПорядкаСтрок",Действие);
КонецПроцедуры

Процедура Событие_ПриУдаленииСтроки(Действие) Экспорт
	СообщитьПодписчикам("ПриУдаленииСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриУдаленииСтроки");
КонецПроцедуры

//}

//{ предопределенные события FormEx

Процедура Событие_ПиктограммаМногострочнойЧасти(НомерПиктограммы) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("НомерПиктограммы",НомерПиктограммы);
	СообщитьПодписчикам("ПиктограммаМногострочнойЧасти",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПиктограммаМногострочнойЧасти",НомерПиктограммы);
КонецПроцедуры

Процедура Событие_ПослеЗакрытия() Экспорт
	СообщитьПодписчикам("ПослеЗакрытия");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеЗакрытия");
КонецПроцедуры

Процедура Событие_ПослеОбновленияФормы() Экспорт
	СообщитьПодписчикам("ПослеОбновленияФормы");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеОбновленияФормы");
КонецПроцедуры

Процедура Событие_ПослеОткрытия() Экспорт
	ТОК_Отладка.Соо("Событие_ПослеОткрытия");
	СообщитьПодписчикам("ПослеОткрытия");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеОткрытия");
КонецПроцедуры

Процедура Событие_ПослеСозданияФормы() Экспорт
	СообщитьПодписчикам("ПослеСозданияФормы");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеСозданияФормы");
КонецПроцедуры

Процедура Событие_ПриАктивацииОкна() Экспорт
	СообщитьПодписчикам("ПриАктивацииОкна");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриАктивацииОкна");
КонецПроцедуры

Процедура Событие_ПриДвиженииМыши(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвиженииМыши",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвиженииМыши",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДвойномНажатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвойномНажатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвойномНажатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДвойномНажатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвойномНажатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвойномНажатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДеактивацииОкна() Экспорт
	СообщитьПодписчикам("ПриДеактивацииОкна");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДеактивацииОкна");
КонецПроцедуры

Процедура Событие_ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота) Экспорт
	ТОК_Отладка.Соо("Событие_ПриИзмененииРазмераОкна");
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ТипСобытия",ТипСобытия);
	СЗПараметры.Установить("Ширина",Ширина);
	СЗПараметры.Установить("Высота",Высота);
	СообщитьПодписчикам("ПриИзмененииРазмераОкна",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриИзмененииРазмераОкна",ТипСобытия,Ширина,Высота);
КонецПроцедуры

Процедура Событие_ПриНажатииКнопкиКлавиатуры(КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КодКлавиши",КодКлавиши);
	СЗПараметры.Установить("ФлагAlt",ФлагAlt);
	СЗПараметры.Установить("ФлагShift",ФлагShift);
	СЗПараметры.Установить("ФлагCtrl",ФлагCtrl);
	СЗПараметры.Установить("Символ",Символ);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииКнопкиКлавиатуры",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииКнопкиКлавиатуры",КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО);
КонецПроцедуры

Процедура Событие_ПриНажатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриНажатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииКнопкиКлавиатуры(КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КодКлавиши",КодКлавиши);
	СЗПараметры.Установить("ФлагAlt",ФлагAlt);
	СЗПараметры.Установить("ФлагShift",ФлагShift);
	СЗПараметры.Установить("ФлагCtrl",ФлагCtrl);
	СЗПараметры.Установить("Символ",Символ);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииКнопкиКлавиатуры",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииКнопкиКлавиатуры",КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

//}

//======================================================================
Функция ЭтоОбработчикСобытия(ИмяМетода)
	Рез = 0;
	
	Если Найти(ИмяМетода, "Событие_") <> 0 Тогда
		Рез = 1;
	КонецЕсли;

	Если Рез = 0 Тогда
		Если Найти(ИмяМетода, "СобытиеГМ_") <> 0 Тогда
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЭтоОбработчикСобытия
//======================================================================
Функция НайтиОбработчик(ТаблицаМетодов, ИмяМетодаДляПоиска)
	
	Рез = "";
	ТаблицаМетодов.ВыбратьСтроки();
	Пока ТаблицаМетодов.ПолучитьСтроку() = 1 Цикл
		ТекИмяМетода = ?(СокрЛП(ТаблицаМетодов.NameRus) = "", ТаблицаМетодов.NameEng, ТаблицаМетодов.NameRus) ;
		Если ТекИмяМетода = ИмяМетодаДляПоиска Тогда
			Рез = ТекИмяМетода;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТОК_Отладка.Соо("ИмяМетодаДляПоиска :: "+ИмяМетодаДляПоиска+" Найденое имя :: "+Рез );
	Возврат Рез;
КонецФункции // НайтиОбработчик
//======================================================================
Процедура  ПодписатьОбъектНаФабрику(КонтекстОбработчика) Экспорт
	фн = "ПодписатьОбъектНаФабрику";
	ТОК_Отладка.о(фн);
	
	ИдПодписчика = ТипЗначенияСтр(КонтекстОбработчика);
	ИдПодписчика = СтрЗаменить(ИдПодписчика, ".","");
	ИдПодписчика = СокрЛП(ИдПодписчика) + _GetPerformanceCounter();
	
	ТаблицаМетодовОбработчика = Информатор.ПолучитьТаблицуМетодов(КонтекстОбработчика);
	
	ТаблицаМетодовФабрики = Информатор.ПолучитьТаблицуМетодов(я());
	
	ТаблицаМетодовФабрики.ВыбратьСтроки();
	Пока ТаблицаМетодовФабрики.ПолучитьСтроку() = 1 Цикл
		ИмяМетодаФабрики = ТаблицаМетодовФабрики.NameRus;
		Если ЭтоОбработчикСобытия(ИмяМетодаФабрики) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетодаФабрикиСПрефиксом	= ИмяМетодаФабрики;
		ИмяМетодаФабрикиБезПрефикса = СтрЗаменить(ИмяМетодаФабрикиСПрефиксом,	"Событие_",		"");
		ИмяМетодаФабрикиБезПрефикса = СтрЗаменить(ИмяМетодаФабрикиБезПрефикса, 	"СобытиеГМ_", 	"");
		ИмяМетодаФабрикиБезПрефиксаПосле = ИмяМетодаФабрикиБезПрефикса + "После";
		
		ИмяМетодаОбработчика = "";
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиБезПрефикса));
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиБезПрефиксаПосле));
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиСПрефиксом));
				
		Если ИмяМетодаОбработчика = "" Тогда
			Продолжить;
		КонецЕсли;
		
		я().ДобавитьПодписчикаСобытия(КонтекстОбработчика, ИдПодписчика, ИмяМетодаОбработчика, ИмяМетодаОбработчика);
	КонецЦикла;
	
	ТОК_Отладка.з(фн);
КонецПроцедуры

